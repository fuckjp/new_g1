<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html lang="jp" xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>[metatags_title]</title><meta name="keywords" content="[metatags_keywords]" /><meta name="description" content="[metatags_description]"/><meta name="copyright" content="&copy; 2015 Konami Sports Club" /><link href="common/css/default.css" rel="stylesheet" type="text/css"><link href="common/css/common.css" rel="stylesheet" type="text/css"><link href="common/css/top.css" rel="stylesheet" type="text/css"><script src="common/js/jquery.min.js" language="javascript" type="text/javascript"></script><script src="common/js/script.js" language="javascript" type="text/javascript"></script><script type="text/javascript" src="//libs.coremetrics.com/eluminate.js"></script><script type="text/javascript" src="/sportsclub/js/analyze.js"></script></head><body><div id="wrapper">    <div id="header">        <div class="content">            <h1>[metatags_titlex],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex]</h1>            <div class="contact"><img src="common/images/h_contact.png" width="313" height="68" alt="TEL 072-263-2622 営業時間 午前9時?午後9時" /></div>            <div class="clear"></div>        </div>    </div>    <!--end.header-->    <div id="gnavi">        <ul class="clearfix">            <li><img src="common/images/gnavi_01_over.gif" width="143" height="37" alt="トップページ" /></li>            <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>            <li>[hrefx][hrefx]</li>            <li>[hrefx][hrefx][hrefx][hrefx]</li>            <li>[hrefx][hrefx][hrefx]</li>            <li>[hrefx][hrefx][hrefx]</li>        </ul>        <div class="clear"></div>    </div>    <!-- end.gnavi -->    <div id="mainimg-wrapper">        <div id="mainimg">            <div class="content">&nbsp;</div>        </div>    </div>    <div id="container">        <div class="content">            <ul class="boxLink">                <li class="box">[hrefx][hrefx]</li>                <li class="box">[hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]</li>                <li class="box">[hrefx][hrefx]</li>                <li class="box">[hrefx][hrefx][hrefx][hrefx][hrefx]</li>                <li class="box boxLast">[hrefx][hrefx]</li>            </ul>            <div class="clear"></div>            <div id="infoAboutWrap">[metatags_descriptionx]<h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>[metatags_descriptionx]<!-- INFORMATION -->[metatags_descriptionx]<!-- /INFORMATION -->                    </ul>                </div>                <!-- end#topInfo -->                <div id="topAbout">                    <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>                    <table width="400" cellspacing="0" cellpadding="0" id="aboutTable">                        <tr>                            <th scope="row">住所</th>                            <td>大阪府高石市西取石6丁目5番6号</td>                        </tr>                        <tr>                            <th scope="row">TEL</th>                            <td>072-263-2622</td>                        </tr>                        <tr>                            <th scope="row">営業時間</th>                            <td>午前9時～午後10時30分</td>                        </tr>                        <tr>                            <th scope="row">休館日</th>                            <td><p>火曜日、年末年始（12月29日～翌年1月3日）</p></td>                        </tr>                    </table>                </div>                <!-- end#topAbout -->                <div class="clear"></div>            </div>            <!-- end#infoAboutWrap -->        </div>    </div>    <!-- end.container -->    <div id="footerWrap">        <div id="footer">            <div id="fnavi">                <ul>                    <li class="first nowPage">トップページ</li>                    <li>[hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]</li>                    <li>[hrefx][hrefx]</li>                    <li>[hrefx][hrefx]</li>                    <li>[hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]</li>                    <li>[hrefx][hrefx]</li>                </ul>                <div class="clear"></div>            </div>            <div id="copyright">&copy;2016 Konami Sports Club</div>        </div>    </div></div></body></html>
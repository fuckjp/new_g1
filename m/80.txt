<!DOCTYPE html><html lang="jp">    <head>        <meta http-equiv="Content-Type" charset="UTF-8" /><meta http-equiv="X-UA-Compatible" content="IE=Edge"><title>[metatags_title]</title><meta name="description" content="[metatags_description]">	<meta name="viewport" content="width=device-width, initial-scale=1"><link rel="stylesheet" type="text/css" href="https://cloud.typography.com/7134294/7279152/css/fonts.css" /><link rel="stylesheet" href="https://wired.jp/wp-content/themes/wired3/common/top_css/wired-3.0.css"><script type="text/javascript" src="https://wired.jp/wp-content/themes/wired3/common/top_js/vendor/jquery-1.11.1.min.js"></script><!--<script type="text/javascript" src="https://wired.jp/wp-content/themes/wired3/common/top_js/jquery-1.7.2.min.js"></script>--><!--[if lt IE 9]>	<script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>	<script>window.html5 || document.write('<script src="/kit/js/vendor/html5shiv.js"><\/script>')</script><![endif]--><meta name="google-site-verification" content="Eu3f9oYbMIsbwy1KGZQGXVq-c9Gv_SSRy64SP9pfbxQ"><meta name="msvalidate.01" content="3FD0E4955A9ADB600024AA8E75F759A3"><meta property="article:publisher" content="https://www.facebook.com/WIRED.jp"><meta property="fb:app_id" content="721425747959511"><meta property="fb:pages" content="122160027866601" /><meta property="og:site_name" content="WIRED.jp"><meta property="og:locale" content="ja_JP"><meta property="og:title" content="[metatags_title]"><meta property="og:url" content="https://wired.jp/2017/04/18/dreaming-consciousness/"><meta name="twitter:card" content="summary_large_image"><meta name="twitter:site" content="@wired_jp"><meta name="twitter:creator" content="@wired_jp"><meta name="twitter:domain" content="wired.jp"><meta property="og:description" content="[metatags_description]"><link rel="canonical" href="https://wired.jp/2017/04/18/dreaming-consciousness/"><link rel="next" href="https://wired.jp/2017/04/18/mind-brain-synchronicity/"><link rel="prev" href="https://wired.jp/2017/04/18/wbb-philosophy/"><link rel="shortcut icon" href="/favicon.ico"><link rel="apple-touch-icon" href="/apple-touch-icon.png"><link rel="alternate" type="application/rss+xml" title="WIRED.jp &raquo; フィード購読" href="https://wired.jp/rssfeeder/"><meta property="og:type" content="article"><meta name="keywords" content="[metatags_keywords]"><meta property="og:image" content="https://wired.jp/wp-content/uploads/2017/04/43472632_m-1024x682.jpg"><link rel="stylesheet" href="https://wired.jp/wp-content/themes/wired3/common/top_css/colorbox.css"><link rel="stylesheet" href="https://wired.jp/wp-content/themes/wired3/common/top_css/g.pc.css"><script>  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');    ga('create', 'UA-23679855-1', 'auto');      ga('set', 'dimension1', 'news');    ga('send', 'pageview');</script><script type="text/javascript">    window._pt_lt = new Date().getTime();          window._pt_sp_2 = [];          _pt_sp_2.push('setAccount,4cb61500');          var _protocol = (("https:" == document.location.protocol) ? " https://" : " http://");          (function() {                var atag = document.createElement('script'); atag.type = 'text/javascript'; atag.async = true;                atag.src = _protocol + 'js.ptengine.jp/pta.js';                var stag = document.createElement('script'); stag.type = 'text/javascript'; stag.async = true;                stag.src = _protocol + 'js.ptengine.jp/pts.js';                var s = document.getElementsByTagName('script')[0];                s.parentNode.insertBefore(atag, s);s.parentNode.insertBefore(stag, s);          })();</script><script type="text/javascript" src="https://apis.google.com/js/plusone.js">  {parsetags: 'explicit'}</script><img src="https://img.macromill.com/imp/us000123kuq/0000005959-img-bf" width="0" height="0" style="display:none;"><script language="JavaScript" type="text/javascript"><!--var yj_sid="784201988"var yj_loc="APZ"var random=new Date();var yj_st=""var yj_prp="jp_adn_wrd"var yj_sig="112ade52f288d04ce85e51f8370bb2f7f5ad8efd"var yj_dom="wired.jp"var yj_ads="//yeas.yahoo.co.jp"var yj_src=yj_ads+'/n?f='+yj_sid+'&p='+yj_prp+'&l='+yj_loc+'&c=r'+'&domain='+yj_dom+'&sig='+yj_sig+'&st='+yj_st+'&jcode=u&rnd='+random.getTime();document.write('<sc'+'ript language="JavaScript" type="text/javascript" src="'+yj_src+'">');document.write('</sc'+'ript>');//--></script>        <script>            var nextPageId = 267743;            var adName = "";            var dfpKeyVal = {              'env': 'prod',              'category': 'news'            };            var dfpPromotionFlg = false;                    </script>    </head>    <body id="article">        <div class="ad-background-holder"><aside class="ad-background js-ad--not-generated" data-ad-type="background"></aside></div>        <header id="header">		[hrefx]	    <h1>[metatags_titlex],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex]</h1>    <i class="icon-humberger" data-trigger="header-menu-navigation"></i>    <div class="header-menu-navigation">    	<div>    		<div class="sp-scroll-area">    		<form method="GET" action="/search/">    			<input type="search" name="q" value="" placeholder="SEARCH">    			<i class="icon-search">検索</i>    		</form>    		<div class="header-menu-content-table">	    		<section class="header-menu-tag-list">        <h1>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h1>		    <ul><li>[hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]</li>			</ul>							<h1>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h1>		    	<ul class="latest-updated-tags"><li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li><li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li><li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li><li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li><li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li><li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li><li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li><li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>				</ul>							</section>		    	<section class="header-menu-article-menu">	    			<h1>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h1>		    		<ul>		    			<li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>		    			<li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>		    			<li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>		    			<li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>		    			<li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>		    			<li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>		    		</ul>		    	</section>		    	<section class="header-menu-wired-menu">	    			<h1>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h1>		    		<ul>		    			<li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>		    			<li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>		    			<li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>		    			<li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>		    			<li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>		    			<li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>		    		</ul>		    	</section>		    </div>				<div class="header-menu-links">	    		[hrefx][hrefx][hrefx][hrefx][hrefx]	    		[hrefx][hrefx][hrefx][hrefx][hrefx]	    		[hrefx][hrefx][hrefx][hrefx][hrefx]	    	</div>	    	<div class="header-menu-links">	    		[hrefx][hrefx][hrefx][hrefx][hrefx]	    		[hrefx][hrefx][hrefx][hrefx][hrefx]	    		[hrefx][hrefx][hrefx][hrefx][hrefx]	    			    	</div>    		<section class="header-menu-follow">    			<h1>[H1]</h1>    			<p>最新情報をSNSやメルマガで！</p>	    		<ul class="social-follow-us-list">			        <li>			            [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]			        </li>			        <li>			            [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]			        </li>              <li>			            [hrefx][hrefx][hrefx][hrefx][hrefx]			        </li>			        <li>			            [hrefx][hr[hrefx][hrefx][hrefx][hrefx][hrefx]			        </li>			        <li>			            [hrefx][hrefx][hrefx][hrefx][hrefx]			        </li>			        <li>			            [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]			        </li>			    </ul>			</section>			<div class="links-to-condenast-site">                [hrefx][hrefx][hrefx][hrefx][hrefx]                [hrefx][hrefx][hrefx][hrefx][hrefx]                [hrefx][hrefx][hrefx][hrefx][hrefx]                [hrefx][hrefx][hrefx][hrefx][hrefx]                [hrefx][hrefx][hrefx][hrefx][hrefx]                [hrefx][hrefx][hrefx][hrefx][hrefx]		    </div>		    <section class="links-to-other-sites">		    	<h1>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h1>                [hrefx][hrefx][hrefx][hrefx][hrefx]                [hrefx][hrefx][hrefx][hrefx]                [hrefx][hrefx][hrefx][hrefx][hrefx]                [hrefx][hrefx][hrefx][hrefx][hrefx]		    </section>		    <section class="links-to-other-media">                [hrefx][hrefx][hrefx][hrefx][hrefx]                [hrefx][hrefx][hrefx][hrefx][hrefx]                [hrefx][hrefx][hrefx][hrefx][hrefx]		    </section>		    <p class="copyright">&copy; CONDE NAST JAPAN All Rights Reserved.</p>    	</div>    	</div>    </div></header>        <aside class="banner-billboard js-ad--not-generated" data-ad-type="billboard"></aside>        <main id="main-article-detail" class="contents-main">            <div id="main-article-detail-container">                <section id="social-share" class="social-share social-nav">	<header>		<h1>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h1>	</header>	<ul>		<li class="social-share-twitter">			[hrefx][hrefx][hrefx][hrefx][hrefx]		</li>		<li class="social-share-facebook">			<a class="fb btn" href="http://www.facebook.com/share.php?u=https%3A%2F%2Fwired.jp%2F2017%2F04%2F18%2Fdreaming-consciousness%2F" onclick="ga('send', 'event', 'article', 'sns_share', 'facebook');window.open(this.href, 'FBwindow', 'width=650, height=450, menubar=no, toolbar=no, scrollbars=yes'); return false;"  rel="nofollow"><i class="icon-facebook"></i></a>		</li>		<li class="social-share-google">			[hrefx][hrefx][hrefx][hrefx][hrefx]		</li>		<li class="social-share-hatena">			[hrefx][hrefx][hrefx][hrefx][hrefx]		</li>				<li class="social-share-pocket">			[hrefx][hrefx][hrefx][hrefx][hrefx]		</li>	</ul></section>                <div id="article-267216">                    <article class="article-detail" data-url="/2017/04/18/dreaming-consciousness/" data-title="「夢はレム睡眠のときに見ている」はウソだった：研究結果" data-description="[描述]">                        <header>[metatags_descriptionx]<h1>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h1>[metatags_descriptionx]                                <div class="social-area-syncer"><ul>      <li class="sc-tw">				<a counturl="https://wired.jp/2017/04/18/dreaming-consciousness/" data-text="[标题] @wired_jp" data-url="https://wired.jp/2017/04/18/dreaming-consciousness/"  href="https://twitter.com/share" class="twitter-share-button" data-lang="ja">Tweet</a>			</li>      <li class="sc-fb">        <span style="vertical-align: top !important; height: 21px;"><div class="fb-like" data-href="https://wired.jp/2017/04/18/dreaming-consciousness/" data-layout="button_count" data-action="like" data-show-faces="true" data-share="false"></div></span>        [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]      </li>      <li class="sc-gp"><g:plusone size="medium" data-href="https://wired.jp/2017/04/18/dreaming-consciousness/"></g:plusone></li>      <li class="sc-hb">[hrefx][hrefx][hrefx][hrefx][hrefx]</li>      <li class="sc-ln">        <a href="//line.me/R/msg/text/?%E3%80%8C%E5%A4%A2%E3%81%AF%E3%83%AC%E3%83%A0%E7%9D%A1%E7%9C%A0%E3%81%AE%E3%81%A8%E3%81%8D%E3%81%AB%E8%A6%8B%E3%81%A6%E3%81%84%E3%82%8B%E3%80%8D%E3%81%AF%E3%82%A6%E3%82%BD%E3%81%A0%E3%81%A3%E3%81%9F%EF%BC%9A%E7%A0%94%E7%A9%B6%E7%B5%90%E6%9E%9C%EF%BD%9CWIRED.jp https://wired.jp/2017/04/18/dreaming-consciousness/" onclick="ga('send', 'event', 'article', 'sns_share_2', 'line');">          <img src="https://wired.jp/wp-content/themes/wired3/common/img/line-send.png" width="82" height="20" alt="LINEで送る">        </a>      </li>      </ul><div id="fb-root"></div></div>                        </header>        					<p><img src="https://wired.jp/wp-content/themes/wired3/pc/images/common/p.gif" data-original="/wp-content/uploads/2017/04/43472632_m.jpg" alt="sheep" width="1240" height="826" class="lazy aligncenter size-full wp-image-268037" srcset="https://wired.jp/wp-content/uploads/2017/04/43472632_m.jpg 1240w, https://wired.jp/wp-content/uploads/2017/04/43472632_m-300x200.jpg 300w, https://wired.jp/wp-content/uploads/2017/04/43472632_m-768x512.jpg 768w, https://wired.jp/wp-content/uploads/2017/04/43472632_m-1024x682.jpg 1024w, https://wired.jp/wp-content/uploads/2017/04/43472632_m-180x120.jpg 180w" sizes="(max-width: 1240px) 100vw, 1240px" /><noscript><img src="/wp-content/uploads/2017/04/43472632_m.jpg" alt="sheep" width="1240" height="826" class="aligncenter size-full wp-image-268037" srcset="https://wired.jp/wp-content/uploads/2017/04/43472632_m.jpg 1240w, https://wired.jp/wp-content/uploads/2017/04/43472632_m-300x200.jpg 300w, https://wired.jp/wp-content/uploads/2017/04/43472632_m-768x512.jpg 768w, https://wired.jp/wp-content/uploads/2017/04/43472632_m-1024x682.jpg 1024w, https://wired.jp/wp-content/uploads/2017/04/43472632_m-180x120.jpg 180w" sizes="(max-width: 1240px) 100vw, 1240px" /></noscript></p><p class="caption">IMAGE: Diana Johanna Velasquez / 123RF</p><p>夢の研究では一般的に、急速眼球運動を伴う「レム睡眠」時に夢を見ていると判断される。この状態のとき、脳の内部では高周波の電気的活動が生じる。一方で、低周波の活動が行われる「ノンレム睡眠」のときにも人は夢を見る場合があることは知られているが、その仕組みについてはよくわかっていなかった。今回の研究が発表されるまでは。</p><p>ウィスコンシン大学マディソン校「[hrefx]<h1>[H1]</h1></article></div></section>        				<section class="article-tag-list">	<h1>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h1>	<ul>    				<li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>				<li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>				<li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>				<li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>			</ul></section>                <section class="article-share">                  <h1>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h1>                        <div class="social-area-syncer"><ul>      <li class="sc-tw">				<a counturl="https://wired.jp/2017/04/18/dreaming-consciousness/" data-text="[标题] @wired_jp" data-url="https://wired.jp/2017/04/18/dreaming-consciousness/"  href="https://twitter.com/share" class="twitter-share-button" data-lang="ja">Tweet</a>			</li>      <li class="sc-fb">        <span style="vertical-align: top !important; height: 21px;"><div class="fb-like" data-href="https://wired.jp/2017/04/18/dreaming-consciousness/" data-layout="button_count" data-action="like" data-show-faces="true" data-share="false"></div></span>        [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]      </li>      <li class="sc-gp"><g:plusone size="medium" data-href="https://wired.jp/2017/04/18/dreaming-consciousness/"></g:plusone></li>      <li class="sc-hb">[hrefx][hrefx][hrefx][hrefx][hrefx]</li>      <li class="sc-ln">        <a href="//line.me/R/msg/text/?%E3%80%8C%E5%A4%A2%E3%81%AF%E3%83%AC%E3%83%A0%E7%9D%A1%E7%9C%A0%E3%81%AE%E3%81%A8%E3%81%8D%E3%81%AB%E8%A6%8B%E3%81%A6%E3%81%84%E3%82%8B%E3%80%8D%E3%81%AF%E3%82%A6%E3%82%BD%E3%81%A0%E3%81%A3%E3%81%9F%EF%BC%9A%E7%A0%94%E7%A9%B6%E7%B5%90%E6%9E%9C%EF%BD%9CWIRED.jp https://wired.jp/2017/04/18/dreaming-consciousness/" onclick="ga('send', 'event', 'article', 'sns_share_2', 'line');">          <img src="https://wired.jp/wp-content/themes/wired3/common/img/line-send.png" width="82" height="20" alt="LINEで送る">        </a>      </li>      </ul><div id="fb-root"></div></div>                </section>        				<script type="text/javascript">$(function() { $("a").click(function(e) {  var ahref = $(this).attr('href');   if (ahref.indexOf("wired.jp") != -1 || ahref.indexOf("http") == -1 ) {    ga('send', 'event', 'internal', '記事：「夢はレム睡眠のときに見ている」はウソだった：研究結果', ahref);   }   else {    ga('send', 'event', 'outgoing', '記事：「夢はレム睡眠のときに見ている」はウソだった：研究結果', ahref);   } });});</script>                </article>                <div id="sidebar-wrap" class="sidebar-wrap">    			           <div id="article-asides" class="article-asides">			<div class="banner-pc-banner-wsky">      <aside class="banner-300x600 js-ad--not-generated" data-ad-type="sky"></aside>    </div>					<section class="listed-article-new">				<header>					<h1>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h1>					<p>注目の情報 What's New</p>				</header>				<ul>				<li>[hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]</li>				</ul>			</section>				<section class="listed-article-new latest"><header><h1>[H1]</h1><p>最新記事</p></header><ul><li>[hrefx]</li></ul></section>  <aside class="banner-300x250 js-ad--not-generated" data-ad-type="rectangle"></aside></div>                </div>                                  <div id="popin-slide-module-related" class="pc"><div class="swiper-slide" id="poppost3" onclick="ga('send', 'event', 'article', 'popin_ad', 'https://wired.jp/ad/2017/nmd/?utm_source=article_popin&utm_medium=wired.jp&utm_campaign=adidas_nmd');" >[hrefx]</div><div class="swiper-slide">                    <a href="https://wired.jp/2017/07/13/breast-cancer-no-treatment/" onclick="ga('send', 'event', 'article', 'related1', 'https://wired.jp/2017/07/13/breast-cancer-no-treatment/');">                    	<article class="listed-article-norm">                        <span class="post-category">NEWS</span>                        <div class="image-holder"><img src="https://i.popincdn.com/article/03e925ed9eec0736be1a139ad955758d.jpg"></div>                        <h1>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h1>                        <time datetime="2017-07-13T17:00:00+00:00">2017.07.13 THU </time>                    </article>                    </a>                </div>		<div class="swiper-slide">                    <a href="https://wired.jp/2017/07/14/pacific-task-chair/" onclick="ga('send', 'event', 'article', 'related2', 'https://wired.jp/2017/07/14/pacific-task-chair/');">                    	<article class="listed-article-norm">                        <span class="post-category">NEWS</span>                        <div class="image-holder"><img src="https://i.popincdn.com/article/4f609f9ec3b2d2e4a9bb4e7d9b908989.jpg"></div>                        <h1>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h1>                        <time datetime="2017-07-14T12:00:00+00:00">2017.07.14 FRI </time>                    </article>                    </a>                </div>		</div><div id="popin-slide-module-related" class="sp"><div class="sp related-bottom-slider swiper-container"><div class="swiper-wrapper"><div class="swiper-slide" id="poppost3" onclick="ga('send', 'event', 'article', 'popin_ad', 'https://wired.jp/ad/2017/nmd/?utm_source=article_popin&utm_medium=wired.jp&utm_campaign=adidas_nmd');" >[hrefx]</div><div class="swiper-slide">                    <a href="https://wired.jp/2017/07/13/breast-cancer-no-treatment/" onclick="ga('send', 'event', 'article', 'related1', 'https://wired.jp/2017/07/13/breast-cancer-no-treatment/');">                    	<article class="listed-article-norm">                        <span class="post-category">NEWS</span>                        <div class="image-holder"><img src="https://i.popincdn.com/article/03e925ed9eec0736be1a139ad955758d.jpg"></div>                        <h1>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h1>                        <time datetime="2017-07-13T17:00:00+00:00">2017.07.13 THU </time>                    </article>                    </a>                </div>		<div class="swiper-slide">                    <a href="https://wired.jp/2017/07/14/pacific-task-chair/" onclick="ga('send', 'event', 'article', 'related2', 'https://wired.jp/2017/07/14/pacific-task-chair/');">                    	<article class="listed-article-norm">                        <span class="post-category">NEWS</span>                        <div class="image-holder"><img src="https://i.popincdn.com/article/4f609f9ec3b2d2e4a9bb4e7d9b908989.jpg"></div>                        <h1>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h1>                        <time datetime="2017-07-14T12:00:00+00:00">2017.07.14 FRI </time>                    </article>                    </a>                </div>		</div></div></div>                                <script type="text/javascript">                  (function() {                    var pa = document.createElement('script'); pa.type = 'text/javascript'; pa.charset = "utf-8"; pa.async = true;                    pa.src = window.location.protocol + "//api.popin.cc/searchbox/wired.js";                    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(pa, s);                    })();                </script>            </div>            <span class="loading"></span>        </main>        <footer id="footer">	<section class="header-menu-follow">		<h1>[H1]</h1>		<p>最新情報をSNSやメルマガで！</p>		<ul class="social-follow-us-list">	        <li>	            [hrefx][hrefx][hrefx][hrefx]	        </li>	        <li>	            [hrefx][hrefx][hrefx][hrefx]	        </li>          <li>              [hrefx][hrefx][hrefx][hrefx]          </li>	        <li>	            [hrefx][hrefx][hrefx][hrefx]	        </li>	        <li>                [hrefx][hrefx][hrefx][hrefx]	        </li>	        <li>	            [hrefx][hrefx][hrefx][hrefx]	        </li>	    </ul>	</section>	<div class="links-to-condenast-site">        [hrefx][hrefx][hrefx][hrefx]        [hrefx][hrefx][hrefx][hrefx]        [hrefx][hrefx][hrefx][hrefx]        [hrefx][hrefx][hrefx][hrefx]        [hrefx][hrefx][hrefx][hrefx]        [hrefx][hrefx][hrefx][hrefx]    </div>    <section class="links-to-other-sites">    	<h1>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h1>        [hrefx][hrefx][hrefx][hrefx]        [hrefx][hrefx][hrefx][hrefx]        [hrefx][hrefx][hrefx][hrefx]        [hrefx][hrefx][hrefx][hrefx]    </section>    <section class="links-to-other-media">        [hrefx][hrefx][hrefx][hrefx][hrefx]        [hrefx][hrefx][hrefx][hrefx][hrefx]        [hrefx][hrefx][hrefx][hrefx]    </section>	<p class="copyright">&copy; CONDE NAST JAPAN All Rights Reserved.</p></footer>        <!-- /** *  New DFP script 2017.2~ */ --><script src='https://www.googletagservices.com/tag/js/gpt.js'></script><script src="https://wired.jp/wp-content/themes/wired3/common/top_js/dfp.js"></script><script>  //DFP tag 初期化  var ad = new Ad('pc');  ad.init();</script><script src="https://wired.jp/wp-content/themes/wired3/common/top_js/vendor/jquery.lazyload.min.js"></script><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script><script src="https://wired.jp/wp-content/themes/wired3/common/top_js/vendor/jquery.scrolldepth.min.js"></script><script src="https://wired.jp/wp-content/themes/wired3/common/top_js/vendor/swiper.min.js"></script><script src="https://wired.jp/wp-content/themes/wired3/common/top_js/vendor/jquery.iframetracker.js"></script><script src="https://wired.jp/wp-content/themes/wired3/common/top_js/wired-3.0.js"></script><script type="text/javascript" src="https://wired.jp/wp-content/themes/wired3/common/top_js/underscore-min.js"></script><script type="text/javascript" src="https://wired.jp/wp-content/themes/wired3/common/top_js/TweenMax.min.js"></script><script type="text/javascript" src="https://wired.jp/wp-content/themes/wired3/common/top_js/EasePack.min.js"></script><script type="text/javascript" src="https://wired.jp/wp-content/themes/wired3/common/top_js/g.config.js"></script><!-- User Insight PCDF Code Start : wired.jp --><script type="text/javascript"><!--var _uic = _uic ||{}; var _uih = _uih ||{};_uih['id'] = 51513;_uih['lg_id'] = '';_uih['fb_id'] = '';_uih['tw_id'] = '';_uih['uigr_1'] = ''; _uih['uigr_2'] = ''; _uih['uigr_3'] = ''; _uih['uigr_4'] = ''; _uih['uigr_5'] = '';_uih['uigr_6'] = ''; _uih['uigr_7'] = ''; _uih['uigr_8'] = ''; _uih['uigr_9'] = ''; _uih['uigr_10'] = '';/* DO NOT ALTER BELOW THIS LINE *//* WITH FIRST PARTY COOKIE */(function() {var bi = document.createElement('scri'+'pt');bi.type = 'text/javascript'; bi.async = true;bi.src = ('https:' == document.location.protocol ? 'https://bs' : 'http://c') + '.nakanohito.jp/b3/bi.js';var s = document.getElementsByTagName('scri'+'pt')[0];s.parentNode.insertBefore(bi, s);})();//--></script><!-- User Insight PCDF Code End : wired.jp --><!-- for sns button --><script>(function(d, s, id) {  var js, fjs = d.getElementsByTagName(s)[0];  if (d.getElementById(id)) return;  js = d.createElement(s); js.id = id; js.async = true;  js.src = "//connect.facebook.net/ja_JP/sdk.js#xfbml=1&version=v2.6&appId=721425747959511";  fjs.parentNode.insertBefore(js, fjs);}(document, 'script', 'facebook-jssdk'));</script><div id="fb-root"></div><script src="https://apis.google.com/js/platform.js" async defer>  {lang: 'ja'}</script><script src="//scdn.line-apps.com/n/line_it/thirdparty/loader.min.js" async="async" defer="defer" ></script><script type="text/javascript">gapi.plusone.go();</script><!-- for reload insta --><script async src="//platform.instagram.com/en_US/embeds.js"></script><script src="//b.st-hatena.com/js/bookmark_button.js" async="async"></script><!-- moat tag --><script>(function(){function t(){for(var a=[8],e=1;1>=e;e++)a.push(8+e),a.push(8-e);a=a[Math.floor(Math.random()*a.length)];return{b:a,a:0==Math.floor(Math.random()*a)}}function k(a){var e=a=a.replace(":","");try{for(var b=0;100>b&&(a=decodeURIComponent(a),e!=a)&&!a.match(/^http(s)?\:/);b++)e=a}catch(c){}return a.replace(/(^\s+|\s+$)/g,"")}try{if(!location||!location.hostname||!location.pathname)return!1;var c=document.location.hostname.replace(/^www\./,""),u=function(){for(var a,b=document.getElementsByTagName("meta"),c,d=0,f=b.length;d<f;d++)if(c=b[d],"og:title"===c.getAttribute("property")){a=c.getAttribute("content");break}a||(a=document.title||"Untitled");return a}(),b={},b=function(a,b,c){a.l1=b;a.l2=c;a.l3="__page__";a.l4="-";return a}(b,c,u),l=(new Date).getTime(),m=Math.floor(Math.random()*Math.pow(10,12)),d,f;f=t();f.a?d=f.b:d=0;b.zmoatab_cm=d;b.t=l;b.de=m;b.zMoatAB_SNPT=!0;var g;d?g=d:g=1;var n;n=f?f.a?!0:!1:!0;var c=[],p=[k(b.l1),k(b.l2),k(b.l3),k(b.l4)].join(":"),v="https://1zd2fypmyf97-a.akamaihd.net/z.gif?e=17&d="+encodeURIComponent(p)+"&de="+m+"&t="+l+"&i=CONDENASTJAPANCONTENT1&cm="+g+"&mp=1&ac=1&pl=1&bq=10&vc=2&cs=0",w="https://px.moatads.com/pixel.gif?e=17&d="+encodeURIComponent(p)+"&de="+m+"&t="+l+"&i=CONDENASTJAPANCONTENT1&cm="+g+"&mp=0&ac=1&pl=1&bq=10&ad_type=img&vc=2&cs=0",x="https://px.moatads.com/pixel.gif?e=17&d="+encodeURIComponent(p)+"&de="+m+"&t="+l+"&i=CONDENASTJAPANCONTENT1&cm="+g+"&ku=1&ac=1&pl=1&bq=10&ad_type=img&vc=2&cs=0";n&&((new Image).src=v,(new Image).src=w);for(var q in b)c.push(q+"="+encodeURIComponent(b[q]));var c=c.join("&"),c=c+"&vc=2",h=document.createElement("script");h.type="text/javascript";h.async=!0;n&&(h.onerror=function(){(new Image).src=x});var r=document.getElementsByTagName("script")[0];r.parentNode.insertBefore(h,r);h.src="https://z.moatads.com/condenastjapancontent941288527517/moatcontent.js#"+c}catch(a){try{var y="//pixel.moatads.com/pixel.gif?e=24&d=data%3Adata%3Adata%3Adata&i=MOATCONTENTABSNIPPET1&vc=2&ac=1&k="+encodeURIComponent(a)+"&j="+encodeURIComponent(document.referrer)+"&cs="+(new Date).getTime();(new Image).src=y}catch(e){}}})();</script><script>  (function(){    // --- Create a div that will simulate an adbox in page    var abcheck = document.createElement('div');    abcheck.innerHTML = '&nbsp;';    // --- Apply a CSS class which will be adblocked    // --- A list of blocked patterns is available at https://easylist-downloads.adblockplus.org/easylistitaly+easylist.txt // --- Here you could use more than one term class to strengthen the catch of adblocks    abcheck.className = 'adsbox';    // --- The empty adbox is appended to the page    document.body.appendChild(abcheck);    // --- Set a reasonable timeout (300 ms.) to give AdBlock a lapse to act.    window.setTimeout(function() {        // --- Check if an AdBlock acted on the adbox        if (abcheck.offsetHeight === 0) {          // --- Adbox was blocked, then send event to GA          ga( 'send', {            'hitType': 'event', // Required.            'eventCategory': 'AdBlock', // Required.            'eventAction': 'hasAdBlock', // Required.            'eventLabel': document.location,            'alwaysSendReferrer': true,            'hitCallback' : function() { // Optional logging in browser, for test purpose              console.log('[AdBlockDetectionScript] Adblock found');            }          });        } else {          // Optional logging in browser, for test purpose          console.log('[AdBlockDetectionScript] No adblock found');        }        // --- Remove div from DOM        abcheck.remove();      }, 300);    })();</script><!-- synergy tag --><script type="text/javascript">(function( window, document, script ) {  var id =  "nay" ;  var firstScriptTag=document.getElementsByTagName( script )[0],    newScriptTag = document.createElement(script);  newScriptTag.async = true;  newScriptTag.src = '//tm.msgs.jp/stm.js?id=' + id ;  firstScriptTag.parentNode.insertBefore(newScriptTag,firstScriptTag) ;})(window,document,'script');</script>    </body></html>
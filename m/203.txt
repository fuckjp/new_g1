        <!DOCTYPE html>        <html>            <head>                <meta http-equiv="Content-Type" charset="UTF-8" />                <meta http-equiv="X-UA-Compatible"  content="IE=Edge" /><script type="text/javascript">window.NREUM||(NREUM={}),__nr_require=function(e,n,t){function r(t){if(!n[t]){var o=n[t]={exports:{}};e[t][0].call(o.exports,function(n){var o=e[t][1][n];return r(o||n)},o,o.exports)}return n[t].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<t.length;o++)r(t[o]);return r}({1:[function(e,n,t){function r(){}function o(e,n,t){return function(){return i(e,[c.now()].concat(u(arguments)),n?null:this,t),n?void 0:this}}var i=e("handle"),a=e(2),u=e(3),f=e("ee").get("tracer"),c=e("loader"),s=NREUM;"undefined"==typeof window.newrelic&&(newrelic=s);var p=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit","addRelease"],d="api-",l=d+"ixn-";a(p,function(e,n){s[n]=o(d+n,!0,"api")}),s.addPageAction=o(d+"addPageAction",!0),s.setCurrentRouteName=o(d+"routeName",!0),n.exports=newrelic,s.interaction=function(){return(new r).get()};var m=r.prototype={createTracer:function(e,n){var t={},r=this,o="function"==typeof n;return i(l+"tracer",[c.now(),e,t],r),function(){if(f.emit((o?"":"no-")+"fn-start",[c.now(),r,o],t),o)try{return n.apply(this,arguments)}finally{f.emit("fn-end",[c.now()],t)}}}};a("setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(e,n){m[n]=o(l+n)}),newrelic.noticeError=function(e){"string"==typeof e&&(e=new Error(e)),i("err",[e,c.now()])}},{}],2:[function(e,n,t){function r(e,n){var t=[],r="",i=0;for(r in e)o.call(e,r)&&(t[i]=n(r,e[r]),i+=1);return t}var o=Object.prototype.hasOwnProperty;n.exports=r},{}],3:[function(e,n,t){function r(e,n,t){n||(n=0),"undefined"==typeof t&&(t=e?e.length:0);for(var r=-1,o=t-n||0,i=Array(o<0?0:o);++r<o;)i[r]=e[n+r];return i}n.exports=r},{}],4:[function(e,n,t){n.exports={exists:"undefined"!=typeof window.performance&&window.performance.timing&&"undefined"!=typeof window.performance.timing.navigationStart}},{}],ee:[function(e,n,t){function r(){}function o(e){function n(e){return e&&e instanceof r?e:e?f(e,u,i):i()}function t(t,r,o,i){if(!d.aborted||i){e&&e(t,r,o);for(var a=n(o),u=m(t),f=u.length,c=0;c<f;c++)u[c].apply(a,r);var p=s[y[t]];return p&&p.push([b,t,r,a]),a}}function l(e,n){v[e]=m(e).concat(n)}function m(e){return v[e]||[]}function w(e){return p[e]=p[e]||o(t)}function g(e,n){c(e,function(e,t){n=n||"feature",y[t]=n,n in s||(s[n]=[])})}var v={},y={},b={on:l,emit:t,get:w,listeners:m,context:n,buffer:g,abort:a,aborted:!1};return b}function i(){return new r}function a(){(s.api||s.feature)&&(d.aborted=!0,s=d.backlog={})}var u="nr@context",f=e("gos"),c=e(2),s={},p={},d=n.exports=o();d.backlog=s},{}],gos:[function(e,n,t){function r(e,n,t){if(o.call(e,n))return e[n];var r=t();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(e,n,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return e[n]=r,r}var o=Object.prototype.hasOwnProperty;n.exports=r},{}],handle:[function(e,n,t){function r(e,n,t,r){o.buffer([e],r),o.emit(e,n,t)}var o=e("ee").get("handle");n.exports=r,r.ee=o},{}],id:[function(e,n,t){function r(e){var n=typeof e;return!e||"object"!==n&&"function"!==n?-1:e===window?0:a(e,i,function(){return o++})}var o=1,i="nr@id",a=e("gos");n.exports=r},{}],loader:[function(e,n,t){function r(){if(!x++){var e=h.info=NREUM.info,n=d.getElementsByTagName("script")[0];if(setTimeout(s.abort,3e4),!(e&&e.licenseKey&&e.applicationID&&n))return s.abort();c(y,function(n,t){e[n]||(e[n]=t)}),f("mark",["onload",a()+h.offset],null,"api");var t=d.createElement("script");t.src="https://"+e.agent,n.parentNode.insertBefore(t,n)}}function o(){"complete"===d.readyState&&i()}function i(){f("mark",["domContent",a()+h.offset],null,"api")}function a(){return E.exists&&performance.now?Math.round(performance.now()):(u=Math.max((new Date).getTime(),u))-h.offset}var u=(new Date).getTime(),f=e("handle"),c=e(2),s=e("ee"),p=window,d=p.document,l="addEventListener",m="attachEvent",w=p.XMLHttpRequest,g=w&&w.prototype;NREUM.o={ST:setTimeout,SI:p.setImmediate,CT:clearTimeout,XHR:w,REQ:p.Request,EV:p.Event,PR:p.Promise,MO:p.MutationObserver};var v=""+location,y={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-1044.min.js"},b=w&&g&&g[l]&&!/CriOS/.test(navigator.userAgent),h=n.exports={offset:u,now:a,origin:v,features:{},xhrWrappable:b};e(1),d[l]?(d[l]("DOMContentLoaded",i,!1),p[l]("load",r,!1)):(d[m]("onreadystatechange",o),p[m]("onload",r)),f("mark",["firstbyte",u],null,"api");var x=0,E=e(4)},{}]},{},["loader"]);</script>                <meta name="google-site-verification" content="FlQt2tgBQ6BUovsrfkV0u7kdOjigq844mLCTEq8NKQQ" />                <link href="/module/public/css/normalize-303/normalize.min.css" rel="stylesheet" />                <!-- link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/normalize/3.0.3/normalize.min.css" -->                    <meta property="og:url"                content="https://www.lifestudio.jp" />                    <meta property="og:type"               content="article" />                    <meta property="og:title"              content="[metatags_title]" />                    <meta property="og:description"        content="[metatags_description]" />                    <meta property="og:image"              content="https://www.lifestudio.jp/public/img/fb_thumb.jpg" />                <title>[metatags_title]</title><meta name="description" content="[metatags_description]">                <script src="/module/public/js/jquery/jquery-1.11.3.min.js"></script>                <script src="/module/public/js/jquery/jquery-ui-1.11.4/jquery-ui.min.js"></script>                <link rel="stylesheet" href="/module/public/js/jquery/jquery-ui-1.11.4/jquery-ui.min.css">                <!-- script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.11.4/jquery-ui.min.js"></script>                <link rel="stylesheet" href="//ajax.googleapis.com/ajax/libs/jqueryui/1.11.4/themes/smoothness/jquery-ui.css" -->                <!-- script src="//use.fontawesome.com/13e9dd2a3d.js"></script -->                <link href="/module/public/css//font-awesome-4.7.0/css/font-awesome.min.css" rel="stylesheet" />                <script src="/module/public/js/jquery/jquery.browser/jquery.browser.min.js?20160120"></script>                <script src="/module/public/js/jquery/jquery.cookie.js"></script>                <!--  script src="//cdnjs.cloudflare.com/ajax/libs/jQuery-Validation-Engine/2.6.4/jquery.validationEngine.min.js"></script -->                <script src="/module/public/js/jquery/validationEngine/js/jquery.validationEngine.js"></script><script src="/module/public/js/jquery/validationEngine/js/languages/jquery.validationEngine-ja.js"></script>                <!-- link  href="//cdnjs.cloudflare.com/ajax/libs/jQuery-Validation-Engine/2.6.4/validationEngine.jquery.min.css" rel="stylesheet" / -->                <link  href="/module/public/js/jquery/validationEngine/css/validationEngine.jquery.css" rel="stylesheet" />                                        <script src="/module/public/js/jquery.validationEngine-ja.local-addrules.js?20160120"></script>                <script src="/module/public/js/jquery/chosen_v1.7.0/chosen.jquery.min.js"></script>                <link  href="/module/public/js/jquery/chosen_v1.7.0/chosen.min.css" rel="stylesheet" />                <!-- script src="//cdnjs.cloudflare.com/ajax/libs/chosen/1.6.1/chosen.jquery.min.js"></script>                <link  href="//cdnjs.cloudflare.com/ajax/libs/chosen/1.6.1/chosen.min.css" rel="stylesheet" / -->                <link href="/module/public/js/jquery/notifIt-master/notifIt/css/notifIt.css" rel="stylesheet">                <script src="/module/public/js/jquery/notifIt-master/notifIt/js/notifIt.js"></script>                <link href="/module/public/js/jquery/timepicker/jquery.ui.timepicker.css" rel="stylesheet" />                <script src="/module/public/js/jquery/timepicker/jquery.ui.timepicker.js"></script>                <script src="/module/public/js/jquery/timepicker/i18n/jquery.ui.timepicker-ja.js"></script>                <script src="/module/public/js/jquery/monthpicker/jquery.ui.monthpicker.js"></script>                <script src="/module/public/js/jquery//Picbox-2.2/js/picbox.js" type="text/javascript"></script>                <link rel="stylesheet" href="/module/public/js/jquery//Picbox-2.2/css/picbox.css" type="text/css" media="screen" />                <script src="/module/public/js/jquery/jquery-blockUI/jquery.blockUI.min.js" type="text/javascript"></script>                <!-- script src="//cdnjs.cloudflare.com/ajax/libs/jquery.blockUI/2.70/jquery.blockUI.min.js"></script -->                <script src="/module/public/js/jquery/jquery.placeholder/jquery.placeholder.min.js" type="text/javascript"></script>                <!-- script src="//cdnjs.cloudflare.com/ajax/libs/jquery-placeholder/2.3.1/jquery.placeholder.min.js"></script -->                <link href="/module/public/css/css_module_global_html5.css?20170506" rel="stylesheet" /><link href="/public/css/local.css?20170506" rel="stylesheet" />                <script>                    var p_COMMON_WEBMODE = "c_wm";                    var p_RUN_ID = "run_id";                    var p_AJAX_STR = "axstr";                </script>                <script src="/module/public/js/js_local.js?20170326"></script>                <script src="/module/public/js/js_startup.js?20170326"></script>                <script>                                        $(function() {                                                $(document).on("click", "#g_btn_login, .g_btn_login", function() {                            var m_URL = "?run_id=log_in&after_url=sGLKSbYdPqkyYwf6XrGH%2FBojhyoULtxX8KKgRblJvqs%3D";                            window.location.href = m_URL;                        });                        /*                        $(document).tooltip({                            content: function () {                                var m_VAL = $(this).prop("title");                                return m_VAL;                            }                          , track: true     // 마우스 따라다니게..                        });*/                        var m_JQ_TT_CNT = 0;                        var m_JQ_TT = "";                                                m_JQ_TT_CNT = $(".g_jq_tooltip").length;                        if (m_JQ_TT_CNT > 0) {                            for (m_I=0; m_I<m_JQ_TT_CNT; m_I++) {                                m_OBJ = $(".g_jq_tooltip:eq("+m_I+")");                                                                m_JQ_TT = m_OBJ.attr("title");                                if (m_JQ_TT == undefined) { m_JQ_TT = ""; }                                                                if (!m_JQ_TT) {                                    m_JQ_TT = m_OBJ.html();                                    m_OBJ.attr("title", m_JQ_TT);                                }                            }                        }                                                m_JQ_TT_CNT = $(".g_jq_tooltip_n").length;                        if (m_JQ_TT_CNT > 0) {                            for (m_I=0; m_I<m_JQ_TT_CNT; m_I++) {                                m_OBJ = $(".g_jq_tooltip_n:eq("+m_I+")");                                                                m_JQ_TT = m_OBJ.attr("title");                                if (m_JQ_TT == undefined) { m_JQ_TT = ""; }                                                                if (!m_JQ_TT) {                                    m_JQ_TT = m_OBJ.html();                                    m_JQ_TT = m_JQ_TT.replaceAll("\n", "<br>");                                    m_OBJ.attr("title", m_JQ_TT);                                }                            }                        }                                                $(".g_jq_tooltip[title], .g_jq_tooltip_n[title]").tooltip({                            show: { duration: 1 }                           ,hide: { duration: 1 }                           ,track: true                        }).each(function(){                            $(this).tooltip({ content: $(this).attr("title")});                        });                    });                </script>        <style>                        #p_index_top {                width: 1000px;                height: 470px;                overflow: hidden;                padding: 0;            }                                #p_main_img {                    width: 100%;                    height: 100%;                    position: relative;                }                                        #p_main_img>ul {                        width: 1000px;                        list-style: none;                        padding: 0;                        margin: 0;                        position: absolute;                    }                        #p_main_img>ul>li { text-align:center; width:1000px; display:inline-block; }                                        #p_main_img .btn_banner_change          { display:inline-block; position: absolute; top:calc(50% - 2em); opacity: 0.3; transition: 300ms; cursor: pointer; }                    #p_main_img .btn_banner_change:hover    { opacity: 1; color: #2a62bc; text-shadow: 0 0 20px #FFFFFF;  }                        #p_main_img .btn_banner_change .fa      { font-size:4em; }                    #p_main_img #btn_banner_change_prev     { left:10px;  }                    #p_main_img #btn_banner_change_next     { right:10px; }                        .p_notice, .p_notice_2col, .p_notice_3col {                display: inline-block;                box-sizing: border-box;                overflow: hidden;            }            .p_notice { height: 250px; }            .p_notice_2col {                margin-right: 10px;                width: calc(50% - 8px);                height: 370px;                padding-top: 5px;            }            .p_notice_2col:nth-child(2n+0) { margin-right: 0px; }             .p_notice_3col {                margin-right: 10px;                width: calc(33.3% - 10px);                height: 265px;            }            .p_notice_3col:nth-child(3n+0) { margin-right: 0px; }                                 .p_main_frame { overflow: hidden; }                                                .p_notice_2col .p_main_frame {                    border-bottom: 1px solid #E0E0E0;                    margin-bottom: 10px;                    position: relative;                    left: -15px;                    width: calc(100% + 30px);                    height: 120px;                }                                        .p_notice_2col .p_main_title {                        border-bottom: 1px dashed #E7E7E7;                        margin-bottom: 10px;                    }                                        .p_notice_2col .p_main_frame .p_index_sec2_img {                        width: 180px;                        height: 120px;                        display: inline-block;                        float:left;                    }                                        .p_notice_2col .p_main_frame .p_main_text {                        display: inline-block;                        margin-left: 10px;                        width: calc(100% - 190px);                    }                                        .p_notice_2col .p_list_frame {                        width: 100%;                        overflow: hidden;                        text-overflow: ellipsis;                        margin-bottom: 5px;                    }                        .p_notice_2col .p_list_frame .p_notice_board_list { width: 100% }                        .p_notice_2col .p_list_frame .p_notice_board_list td:nth-child(1) { width: 80px; }                                        .p_mark_more_2col { text-align: right; }                                .p_notice_3col .p_main_frame {                    position: relative;                    top: -15px;                    left: -15px;                    height: 140px;                    width: calc(100% + 30px);                    margin-bottom: -10px;                }                                        .p_notice_3col .p_main_frame .p_index_sec3_img {                        max-width: 100%;                        max-height: 100%;                        min-width: 100%;                        min-height: 100%;                        display: inline-block;                        float:left;                    }                                        .p_notice_3col .p_main_title {                        border-bottom: 1px dashed #E7E7E7;                        margin-bottom: 10px;                    }                        .p_out_post_list, .p_out_post_list_blog, .p_out_post_list_branch_news { cursor: pointer; }                        .p_notice_row_1 {                width: 100%;                height: 190px;                margin-bottom: 10px;            }            .p_notice_row_1 .p_notice_2col {                height: calc(100% - 2px);            }                                .p_notice_row_1 .p_list .p_item_cate {                    color: #FFFFFF;                    border-radius: 2px;                    padding: 2px;                    display: inline-block;                    width: 42px;                    overflow: hidden;                    white-space: nowrap;                    vertical-align: middle;                    text-align: center;                }                                .p_notice_row_1 #p_notice_news .p_list td { padding-left:0; padding-right:5px; }                .p_notice_row_1 #p_notice_news .p_list td:nth-child(2) { font-size: 0.6em; }                .p_notice_row_1 #p_notice_news .p_list td:nth-last-child { padding-right:0; }                                .p_notice_row_1 #p_notice_branch_news .p_list td { padding-left:0; padding-right:5px; }                .p_notice_row_1 #p_notice_branch_news .p_list td:nth-child(2) { font-size: 0.6em; }                .p_notice_row_1 #p_notice_branch_news .p_list td:nth-last-child { padding-right:0; }                        .p_notice_blog .gi_brd_list_item { padding: 20px; border-bottom: 1px solid #C0C0C0; }                                .p_notice_blog .gi_brd_list_item .gi_brd_item_img   { width: 200px; height: 200px; display: inline-block; text-align: center; position: relative; }                    .p_notice_blog .gi_brd_list_item .gi_brd_item_img img  { max-width: 100%; max-height: 100%; border: 1px solid #C0C0C0; }                                .p_notice_blog .gi_brd_list_item .gi_brd_item_text  { display: inline-block; vertical-align: top; padding: 20px; height: 200px; width: 450px; overflow: hidden; box-sizing: border-box; }                                        .p_notice_blog .gi_brd_list_item .gi_brd_item_text .gi_brd_item_cont { padding-top: 10px; display: block; height: 110px; }                                .p_notice_blog .gi_brd_list_item .gi_brd_list_cmt_cnt    { font-size: 11px; color: #808080; margin-left: 5px; }                                .p_notice_blog .gi_brd_list_item .gi_brd_list_hit_cnt    { font-size: 11px; color: #808080; margin-left: 5px; }        </style>        <script>            $(function() {                                $(".p_notice_blog .gi_brd_list_item .gi_brd_item_img img").load( function() {                    var m_THIS = $(this);                    var m_HEIGHT_P   = m_THIS.parent().height();                    var m_HEIGHT_IMG = m_THIS.height();                    var m_TOP = m_HEIGHT_P - m_HEIGHT_IMG;                    if (m_TOP > 2) { m_TOP = m_TOP / 2 ; }                    m_THIS.css("position", "relative")                          .css("top", m_TOP);                });                                $(document).on("click", ".p_out_post_list_branch_news", function() {                    var m_VAL2 = $(this).attr("po_seq");                    var m_VAL3 = $(this).attr("b");                    var m_URL = "?run_id=studio_brd&bs=branch_news&po_seq=II_val2_II&b=II_val3_II";                    m_URL = m_URL.replace("II_val2_II", m_VAL2)                                 .replace("II_val3_II", m_VAL3);                    window.location.href = m_URL;                });                                $(document).on("click", ".p_out_post_list", function() {                    var m_VAL  = $(this).attr("bs");                    var m_VAL2 = $(this).attr("po_seq");                    var m_URL = "?run_id=brd&bs=II_val_II&po_seq=II_val2_II";                    var m_URL2= "?run_id=brd&bs=II_val_II";                    if (m_VAL2 == undefined) {                        m_URL = m_URL2.replace("II_val_II", m_VAL);                    } else {                        m_URL = m_URL.replace("II_val_II", m_VAL)                                     .replace("II_val2_II", m_VAL2);                    }                    window.location.href = m_URL;                });                                $(document).on("click", "#p_notice_staffblog .gi_brd_list_item", function() {                    var m_PSEQ = $(this).attr("po_seq");                    var m_USEQ = $(this).attr("po_u_seq");                    var m_URL = "?run_id=staf_blog&po_seq=II_PSEQ_II&po_u_seq=II_USEQ_II";                    m_URL = m_URL.replace("II_PSEQ_II", m_PSEQ)                                 .replace("II_USEQ_II", m_USEQ);                    window.location.href = m_URL;                });                                $(document).on("click", ".p_out_post_list_blog", function() {                    var m_URL = "?run_id=staf_blog_latest";                    window.location.href = m_URL;                });                                $(document).on("click", ".p_notice_3col", function() {                    var m_STR = $(this).attr("str");                    var m_URL = "?run_id=II_str_II";                    m_URL = m_URL.replace("II_str_II", m_STR);                    window.location.href = m_URL;                });                            });        </script>            </head>            <body>                <div id="g_body">            <header id="g_header">                                <div id="g_header_top">                        <a href="/">                <img id="g_header_logo" src="/public/img/top-logo.png">            </a>                        <nav id="g_header_menu_personal">                <ul>                    <li id="g_btn_sesn">                                                <a class="menu" href="#"><i class="fa fa-camera"></i> ご予約はこちらから</a>                    </li>                        <li>                                <a class="menu" id="g_btn_login" href="#">ログイン</a>                        </li>                        <li>                                <a class="menu" id="g_btn_join" href="#">会員登録</a>                        </li>                </ul>            </nav>                        <a href="javascript:;" class="g_btn g_btn_scroll_top g_scroll_top fa fa-arrow-up g_btn_size_3 " id="g_scroll_top"   >上へ戻る</a>        </div>            <nav id="g_header_menu_top">                <ul>                        <li>                            <a href="#">                                <img  alt="About" class="g_hover_img" file_name="about1.jpg" file_name_hover="about2.jpg" path="/public/img/top_menu/" src="/public/img/top_menu/about1.jpg">                            </a><ul  class="g_header_menu_top_sub"><li ><a  href="?run_id=lifestudio">ライフスタジオとは？</a></li><li ><a  href="?run_id=studio_index">店舗情報</a></li></ul>                        </li>                        <li>                            <a href="#">                                <img  alt="Photography" class="g_hover_img" file_name="photography1.jpg" file_name_hover="photography2.jpg" path="/public/img/top_menu/" src="/public/img/top_menu/photography1.jpg">                            </a><ul  class="g_header_menu_top_sub"><li ><a  href="?run_id=photography&str=interior">Interior design</a></li><li ><a  href="?run_id=photography&str=eyes">Eyes</a></li><li ><a  href="?run_id=photography&str=daylight">Daylight</a></li></ul>                        </li>                        <li>                            <a href="#">                                <img  alt="System" class="g_hover_img" file_name="system1.jpg" file_name_hover="system2.jpg" path="/public/img/top_menu/" src="/public/img/top_menu/system1.jpg">                            </a><ul  class="g_header_menu_top_sub"><li ><a  href="?run_id=start_guide">ご予約と撮影の流れ</a></li><li ><a  href="?run_id=order_guide">料金と商品のご注[metatags_descriptionx]</a></li><li ><a  href="?run_id=faq">よくあるご質問</a></li></ul>                        </li>                        <li>                            <a href="#">                                <img  alt="Product" class="g_hover_img" file_name="product1.jpg" file_name_hover="product2.jpg" path="/public/img/top_menu/" src="/public/img/top_menu/product1.jpg">                            </a><ul  class="g_header_menu_top_sub"><li ><a  href="?run_id=life_gallery">Life gallery </a></li><li ><a  href="?run_id=product">商品のご案内</a></li></ul>                        </li>                        <li>                            <a href="#">                                <img  alt="Community" class="g_hover_img" file_name="community1.jpg" file_name_hover="community2.jpg" path="/public/img/top_menu/" src="/public/img/top_menu/community1.jpg">                            </a><ul  class="g_header_menu_top_sub"><li ><a  href="?run_id=brd&bs=guest_story">ゲストストーリー</a></li><li ><a  href="?run_id=brd&bs=life_story">ライフストーリー</a></li><li ><a  href="?run_id=staf_blog_index">スタッフブログ</a></li><li ><a  href="?run_id=brd&bs=photogenic">フォトジェニック</a></li><li ><a  href="?run_id=brd&bs=monthly_photo">マンスリーフォトジェニック</a></li><li ><a  href="?run_id=brd&bs=my_life_gallery">My life gallery</a></li><li ><a  href="?run_id=lifegift_brd&bs=event_lifegift">Lifegift</a></li></ul>                        </li>                </ul>            </nav>        <script>            $(function() {                                $(window).resize(function() {                    var m_OBJ_TOP = $("#g_header_top");                    var m_LEFT = m_OBJ_TOP.offset().left + m_OBJ_TOP.width();                    $("#g_scroll_top").css("left" ,m_LEFT+"px")                                      .css("top"  ,"139px");                });                $(window).resize();                                $(document).on("click", "#g_btn_sesn", function(m_KEY) {//                    var m_URL = "?run_id=sesn_cald";                    var m_URL = "?run_id=sesn_resv_agree";                    var m_PARAM   = Array();                    // 화면열기                    m_PARAM["key_shift"] = m_KEY.shiftKey;                    m_PARAM["key_ctrl"]  = m_KEY.ctrlKey;                    pf_WINDOW_OPEN(m_URL, m_PARAM);                });                                $(document).on("click", "#g_btn_join", function() {                    var m_URL = "?run_id=user_join";                    window.location.href = m_URL;                });                                $(document).on("click", "#g_btn_myhome", function(m_KEY) {                    var m_URL = "?run_id=sesn_resv_list";                    var m_PARAM   = Array();                    // 화면열기                    m_PARAM["key_shift"] = m_KEY.shiftKey;                    m_PARAM["key_ctrl"]  = m_KEY.ctrlKey;                    pf_WINDOW_OPEN(m_URL, m_PARAM);                });            });        </script>            </header><section id="g_content"><section class="g_content_sec">                <section class="g_content_top" id="p_index_top"><div  id="p_main_img"><ul ><li ><img  src="/data_up/www/bnnr/1/o_1bj2ser80i4m1ojd1m6j54718lfa.jpg?1497966799" alt="6月MAIN"></li></ul></div>        </section></section>            <section class="g_content_sec">                    <nav id="g_content_left">                                    <nav class="g_content_left_menu">                <ul>                        <li>                            <a  href="?run_id=studio_index" class="menu_img" file="/public/img/left_menu/common/studio1.jpg" hover="/public/img/left_menu/common/studio2.jpg" style="width:230px;height:55px;" title="studio"></a>                        </li>                        <li>                            <a  href="?run_id=start_guide" class="menu_img" file="/public/img/left_menu/common/startguide1.jpg" hover="/public/img/left_menu/common/startguide2.jpg" style="width:230px;height:55px;" title="startguide"></a>                        </li>                        <li>                            <a  href="?run_id=ord" class="menu_img" file="/public/img/left_menu/common/order1.jpg" hover="/public/img/left_menu/common/order2.jpg" style="width:230px;height:55px;" title="order"></a>                        </li>                        <li>                            <a  href="?run_id=sesn_cald" class="menu_img" file="/public/img/left_menu/common/reservation1.jpg" hover="/public/img/left_menu/common/reservation2.jpg" style="width:230px;height:55px;" title="reservation"></a>                        </li>                </ul>            </nav>            <nav class="g_content_left_banner">                <ul>                        <li>                            <a  href="?run_id=brd&bs=monthly_photo" class="menu_img" file="/public/img/left_menu/banner/monthlyphoto1.jpg" hover="/public/img/left_menu/banner/monthlyphoto2.jpg" style="width:230px;height:85px;" title="Monthly photo" target></a>                        </li>                        <li>                            <a  href="https://www.lifestudio-award.com/" class="menu_img quadrangle" file="/public/img/left_menu/banner/life_award.jpg" hover="/public/img/left_menu/banner/life_award.jpg" style="width:230px;height:128px;" title="Life Award" target="_blank"></a>                        </li>                        <li>                            <a  href="http://photoletteritsumo.jp" class="menu_img quadrangle" file="/public/img/left_menu/banner/itsumo-banner.jpg" hover="/public/img/left_menu/banner/itsumo-banner.jpg" style="width:230px;height:85px;" title="Itsumo" target="_blank"></a>                        </li>                        <li>                            <a  href="https://www.instagram.com/lifestudio_official/" class="menu_img quadrangle" file="/public/img/left_menu/banner/insta-banner.jpg" hover="/public/img/left_menu/banner/insta-banner.jpg" style="width:230px;height:85px;" title="Instagram" target="_blank"></a>                        </li>                </ul>            </nav>        <script>            $(function() {                                $(".g_content_left_menu .menu_img, .g_content_left_banner .menu_img").each(function(index) {                    var m_THIS = $(this);                    var m_FILE = $(this).attr("file");                    m_THIS.css("background-image", "url("+m_FILE+")");                }).hover(                       function() {                            var m_FILE = $(this).attr("hover");                        $(this).css("background-image", "url("+m_FILE+")");                    }                  , function() {                            var m_FILE = $(this).attr("file");                        $(this).css("background-image", "url("+m_FILE+")");                  }                );            });        </script>                    </nav><section id="g_content_body">                <div class="g_content_sec">                        <div class="g_content_art p_notice_blog" id="p_notice_staffblog"><img  src="/public/img/index/title-staffblog.png"><div  class="g_list_item gi_brd_list_item" bs="staff_blog" po_seq="148761" po_u_seq="11592"><div  class="gi_brd_item_img"><img  src="/data_up/www/board_atch/201708/148761//thumb_o_1bn75s6af179hk1f1itd1n8f1rj77.JPG"></div><div  class="gi_brd_item_text"><div  class="g_content_art_title gi_brd_item_title">夏の思い出 その1</div><div  class="g_content_art_title_2 gi_brd_item_title_sub">2017-08-11(金) 07:57:59<span  class="gi_brd_list_cmt_cnt">コメント:0</span><span  class="gi_brd_list_hit_cnt">hit:24</span></div><span  class="g_content_art_msg gi_brd_item_cont">先日のものすごい暑さだった日。私は家で猛烈にヨガをやっておりました。クーラーもつけず、サウナスーツを着込み、パワーヨガをやる私を見て、嫁は「頑張れ」と声を掛けてくれる優しさに、心もサウナスーツの中もビショビショになりました。髪を切るという行為は私にとって別にどこでも誰でもいいやが当たり前でした。髪を切りに栃木まで行く嫁を�</span></div></div><div  class="g_list_item gi_brd_list_item" bs="staff_blog" po_seq="148760" po_u_seq="46148"><div  class="gi_brd_item_img"><img  src="/data_up/www/board_atch/201708/148760//thumb_o_1bn6ele4b18nd1e8e1eb21v3g1e6e7.PNG"></div><div  class="gi_brd_item_text"><div  class="g_content_art_title gi_brd_item_title">あと一瞬…待ってみる</div><div  class="g_content_art_title_2 gi_brd_item_title_sub">2017-08-11(金) 01:23:43<span  class="gi_brd_list_cmt_cnt">コメント:0</span><span  class="gi_brd_list_hit_cnt">hit:29</span></div><span  class="g_content_art_msg gi_brd_item_cont">撮影時間は想像してるよりも早いそれこそ一瞬で過ぎ去って行くようだカメラを握って無我夢中でいるといつの間にか過ぎているこの中で果たして頭の回転はどこまでついてきているのやら、、、実際は体の感覚の方が先に進んでいる気がするそんな中、私は今シャッタータイミングを課題に取り組んでいる&lt;どの一瞬を切り取るのか&gt;その選択は、本番�</span></div></div><div  class="g_list_item gi_brd_list_item" bs="staff_blog" po_seq="148759" po_u_seq="116135"><div  class="gi_brd_item_img"><img  src="/data_up/www/board_atch/201708/148759//thumb_o_1bn6advko3ddbs4n8l1u8b5sc7.JPG"></div><div  class="gi_brd_item_text"><div  class="g_content_art_title gi_brd_item_title">ほぼ日フォト#21</div><div  class="g_content_art_title_2 gi_brd_item_title_sub">2017-08-10(木) 23:58:05<span  class="gi_brd_list_cmt_cnt">コメント:2</span><span  class="gi_brd_list_hit_cnt">hit:24</span></div><span  class="g_content_art_msg gi_brd_item_cont">撮影中、一生懸命こちらの質問に答えてくれたあなた。家でも傘を持つ練習をして来て頑張ってくれたあなた。そうやっていろんなことを経験して一歩ずつ大きくなっていく。モニター中、「こんなに大きくなったんだ」と流してくれたママさんの涙。あなたが成長していくこと、それこそ大きな愛の証。［撮影データ］絞り:3.2シャッター速度:1/100ISO�</span></div></div>                                <div class="p_mark_more_2col p_out_post_list_blog">▶記事一覧</div>            </div>        </div>                <div class="g_content_sec">                        <div class="g_content_art p_notice_2col" id="p_notice_guest"><div  class="g_content_art_title p_main_title p_out_post_list" bs="guest_story">Guest story</div>                <div class="p_main_frame p_out_post_list" bs="guest_story">                    <img class="p_index_sec2_img" src="/public/img/index/index-col2-1.jpg">                    <div class="p_main_text">                        お客様からの投稿コーナー<br>                        です。スタジオでの撮影の<br>                        感想やおうちでの撮影など、<br>                        何でも投稿できます。写真を<br>                        通して交流しましょう！                    </div>                </div>                <div  class="g_list_title">New comment</div>                <div class="p_list_frame"><table  class="g_notice_list p_notice_board_list"><tr ><td >2017-08-09(水)</td><td ><span  class="g_list_item p_out_post_list" bs="guest_story" po_seq="148737">ハーフ成人式、とってもいい思い出になりました。</span></td></tr><tr ><td >2017-08-09(水)</td><td ><span  class="g_list_item p_out_post_list" bs="guest_story" po_seq="148726">大宮店のみなさまへ</span></td></tr><tr ><td >2017-08-09(水)</td><td ><span  class="g_list_item p_out_post_list" bs="guest_story" po_seq="148725">国分寺店の皆様へ</span></td></tr><tr ><td >2017-08-09(水)</td><td ><span  class="g_list_item p_out_post_list" bs="guest_story" po_seq="148724">息子1歳の誕生日記念♡</span></td></tr></table>                </div>                                <div class="p_mark_more_2col p_out_post_list" bs="guest_story">▶記事一覧</div>            </div>                        <div class="g_content_art p_notice_2col" id="p_notice_lifestory"><div  class="g_content_art_title p_main_title p_out_post_list" bs="life_story">Life story</div>                <div class="p_main_frame p_out_post_list" bs="life_story">                    <img class="p_index_sec2_img" src="/public/img/index/index-col2-2.jpg">                    <div class="p_main_text">                        ライフスタジオでのできごと<br>                        やスタッフ達の日常をご紹介。<br>                        スタジオでのイベントの様子、<br>                        個性豊かなスタッフ達の日常<br>                        などを覗いてみてください。                    </div>                </div>                <div  class="g_list_title">New comment</div>                <div class="p_list_frame"><table  class="g_notice_list p_notice_board_list"><tr ><td >2017-08-10(木)</td><td ><span  class="g_list_item p_out_post_list" bs="life_story" po_seq="148756">青葉、イベントやってるってよ　～チャプター1～</span></td></tr><tr ><td >2017-08-10(木)</td><td ><span  class="g_list_item p_out_post_list" bs="life_story" po_seq="148746">☆☆ライフスタジオ大宮店より暑中見舞い申し上げます☆☆</span></td></tr><tr ><td ><span style="color:#FF0000">2017-08-06(日)</span></td><td ><span  class="g_list_item p_out_post_list" bs="life_story" po_seq="148679">～ヘアアレンジ講習会開催～</span></td></tr><tr ><td >2017-08-03(木)</td><td ><span  class="g_list_item p_out_post_list" bs="life_story" po_seq="148589">LIFE BAND in 新横浜</span></td></tr></table>                </div>                                <div class="p_mark_more_2col p_out_post_list" bs="life_story">▶記事一覧</div>            </div>        </div>                <div class="g_content_sec p_notice_row_1">                        <div class="g_content_art p_notice_2col" id="p_notice_news">                <div  class="g_content_art_title">News</div>                <div class="p_list_frame"><table  class="g_notice_list p_list"><tr ><td ><span  class="p_item_cate" style="background-color:#008CFF;">News</span></td><td >2017-08-08(火)</td><td ><span  class="g_mark_new"></span>&nbsp;<span  class="g_list_item p_out_post_list" bs="news" po_seq="148716">アクセス集中によるつながりにくい状態について</span></td></tr><tr ><td ><span  class="p_item_cate" style="background-color:#008CFF;">News</span></td><td ><span style="color:#0080FF">2017-07-29(土)</span></td><td ><span  class="g_list_item p_out_post_list" bs="news" po_seq="148356">★Life studio　青山店＆自由が丘店　New Staff 募集★</span></td></tr><tr ><td ><span  class="p_item_cate" style="background-color:#FF1E2D;">Event</span></td><td >2017-07-27(木)</td><td ><span  class="g_list_item p_out_post_list" bs="news" po_seq="148291">★Instagram Event 開催中★（８月１５日まで）</span></td></tr></table>                </div>                                <div class="p_mark_more_2col p_out_post_list" bs="news">▶記事一覧</div>            </div>                        <div class="g_content_art p_notice_2col" id="p_notice_branch_news">                <div  class="g_content_art_title">Branch News</div>                <div class="p_list_frame"><table  class="g_notice_list p_list"><tr ><td ><span  class="p_item_cate" style="background-color:#FF1E2D;">Event</span></td><td >2017-08-11(金)</td><td ><span  class="g_mark_new"></span>&nbsp;<span  class="g_list_item p_out_post_list_branch_news" bs="branch_news" b="yokohama_aoba" po_seq="148763">横浜青葉店 | 【EVENT】8月青葉店イベント進行中！</span></td></tr><tr ><td ><span  class="p_item_cate" style="background-color:#008CFF;">News</span></td><td ><span style="color:#0080FF">2017-08-05(土)</span></td><td ><span  class="g_mark_new"></span>&nbsp;<span  class="g_list_item p_out_post_list_branch_news" bs="branch_news" b="yokohama_aoba" po_seq="148655">横浜青葉店 | あおばイズム～あなたを癒すやさしいカオリ～</span></td></tr><tr ><td ><span  class="p_item_cate" style="background-color:#008CFF;">News</span></td><td >2017-08-04(金)</td><td ><span  class="g_mark_new"></span>&nbsp;<span  class="g_list_item p_out_post_list_branch_news" bs="branch_news" b="mito" po_seq="148604">水戸店 | 水戸店からのお知らせです。</span></td></tr></table>                </div>            </div>        </div>                <div class="g_content_sec">                        <div class="g_list_item g_content_art p_notice_3col" str="start_guide">                <div class="p_main_frame">                    <img class="p_index_sec3_img" src="/public/img/index/index-col3-1.jpg">                </div>                <div  class="g_content_art_title p_main_title"><span  style="display:inline-block;color:#000000;" class="g_content_art_desc">はじめての</span> Lifestudio</div>                <span  class="g_content_art_desc">ライフスタジオの撮影システムをご案内いたします。はじめてご利用の方はまずはこちら。</span>            </div>                        <div class="g_list_item g_content_art p_notice_3col" str="studio_index">                <div class="p_main_frame">                    <img class="p_index_sec3_img" src="/public/img/index/index-col3-2.jpg">                </div>                <div  class="g_content_art_title p_main_title">店舗情報</div>                <span  class="g_content_art_desc">気になるインテリアのお店、お好きなスタッフのいるお店、お気に入りの店舗を見つけてください！</span>            </div>                        <div class="g_list_item g_content_art p_notice_3col" str="product">                <div class="p_main_frame">                    <img class="p_index_sec3_img" src="/public/img/index/index-col3-3.jpg">                </div>                <div  class="g_content_art_title p_main_title">Product</div>                <span  class="g_content_art_desc">一緒に過ごした楽しい時間、家族の幸せをかたちにしましょう。大切な瞬間をいつでも手に取り確かめられるように。</span>            </div>        </div>                                </section>                        </section>                </section>            <footer id="g_footer"><div  id="g_footer_menu_frame"><div  class="g_footer_menu"><div  class="title">About</div><a  class="sub_menu" href="?run_id=lifestudio">ライフスタジオとは？</a><a  class="sub_menu" href="?run_id=studio_index">店舗情報</a></div><div  class="g_footer_menu"><div  class="title">Photography</div><a  class="sub_menu" href="?run_id=photography&str=interior">Interior design</a><a  class="sub_menu" href="?run_id=photography&str=eyes">Eyes</a><a  class="sub_menu" href="?run_id=photography&str=daylight">Daylight</a></div><div  class="g_footer_menu"><div  class="title">System</div><a  class="sub_menu" href="?run_id=start_guide">ご予約と撮影の流れ</a><a  class="sub_menu" href="?run_id=order_guide">料金と商品のご注[metatags_descriptionx]</a><a  class="sub_menu" href="?run_id=faq">よくあるご質問 </a></div><div  class="g_footer_menu"><div  class="title">Product</div><a  class="sub_menu" href="?run_id=life_gallery">Life gallery </a><a  class="sub_menu" href="?run_id=product">商品のご案内</a></div><div  class="g_footer_menu"><div  class="title">Community</div><a  class="sub_menu" href="?run_id=brd&bs=guest_story">ゲストストーリー</a><a  class="sub_menu" href="?run_id=brd&bs=life_story">ライフストーリー</a><a  class="sub_menu" href="?run_id=staf_blog_index">スタッフブログ</a><a  class="sub_menu" href="?run_id=brd&bs=photogenic">フォトジェニック</a><a  class="sub_menu" href="?run_id=brd&bs=monthly_photo">マンスリーフォトジェニック</a></div><div  class="g_footer_menu"><div  class="title">運営会社情報</div><a  class="sub_menu" href="?run_id=company_profile">会社概要</a><a  class="sub_menu" href="?run_id=brd&bs=recruit">リクルート</a><a  class="sub_menu" href="?run_id=brd&bs=report">Report</a><a  class="sub_menu" href="?run_id=brd&bs=education">Education Program</a><a  class="sub_menu" href="?run_id=doc_site_rule">サイトポリシー</a><a  class="sub_menu" href="?run_id=doc_pvcy_policy">プライバシーポリシー</a></div><div  class="g_footer_menu"></div></div>                <!-- img id="g_footer_logo" src="/public/img/footer-logo.png" -->                <div id="g_footer_copyright">                    <a href="?run_id=env_machine" class="g_btn g_btn_size_3 " id="g_btn_env_machine"   >推奨環境について</a>                    <br>                    Copyright©Life Studio All Rights Reserved.<br>                    当サイトの画像・[metatags_descriptionx][metatags_descriptionx]の無断転載・コピーは固くお断り致します。                </div>            </footer>            <script type="text/javascript">              var _gaq = _gaq || [];              _gaq.push(['_setAccount', 'UA-43616238-1']);              _gaq.push(['_trackPageview']);              (function() {                var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;                ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';                var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);              })();            </script><div id="g_popup"><div style="text-align: center;"><strong>Lifestudio Official Instagram<br />Summer Event<br />「#やっぱりライフ」</strong></div><div style="text-align: center;"> </div><div style="text-align: center;"><br /><img alt="" src="/data_up/www/popup/1501124749_e4383fbf.jpg" style="width: 560px; height: 279px;" /><br />ライフスタジオの１０年間、<br />これまでたくさんの方々と<br />忘れられない出会いがありました。<br /><br />ライフスタジオ公式インスタグラムに<br />撮影のエピソードを送って下さい。<br /><strong>抽選で素敵なプレゼントをお届けします。</strong><br /><br />詳しい内容は<strong>[hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]</strong>又は<br />ライフスタジオ<strong>[hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]</strong>を<br />ご覧下さい。<br /> </div></div>                    <script>                        $(function() {                            $("#g_popup").dialog( {width: 600, height: 500, resizable: true, show: {effect: "blind",duration: 500} } );                        });                    </script>                <!-- process time:Array(    [run_time] => 0.85054588317871    [db_conn] => 0.57457399368286    [sys_cd_get] => 0.57494783401489    [page_info] => 0.577152967453    [log_in] => 0.5772659778595    [param_ck] => 0.57729601860046    [ex_param_ck] => 0.57729887962341    [var_init] => 0.57733082771301)-->                </div>              <script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"beacon":"bam.nr-data.net","licenseKey":"8ca624c2cb","applicationID":"30638283","transactionName":"ZF1QbBdYDBVZUkZZWF0XZ0oMFgsIXFRKHkdbSA==","queueTime":0,"applicationTime":856,"atts":"SBpTGl9CHxs=","errorBeacon":"bam.nr-data.net","agent":""}</script></body>        </html>
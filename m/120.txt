<!DOCTYPE html><html lang="jp" class="no-js"><head>	<meta http-equiv="X-UA-Compatible" content="IE=edge">	<meta http-equiv="Content-Type" charset="UTF-8" />	<title>[metatags_title]</title>            <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no">        <meta name="format-detection" content="telephone=no">	<!--<script src="http://kougeihin.jp/system-manager/wp-content/themes/dentoukougei/js/lib/queryloader2.min.js" type="text/javascript"></script><script>window.addEventListener('DOMContentLoaded', function() {    new QueryLoader2(document.querySelector("body"), {        barHeight : 3,	    backgroundColor : '#fff',	    barColor : '#cd6161',        minimumTime: 200,        fadeOutTime: 1000    });});</script>-->    <link rel="stylesheet" type="text/css" href="http://kougeihin.jp/system-manager/wp-content/themes/dentoukougei/css/font-awesome.css">    <link rel="stylesheet" type="text/css" href="http://kougeihin.jp/system-manager/wp-content/themes/dentoukougei/css/animate.css">    <link rel="stylesheet" type="text/css" href="http://kougeihin.jp/system-manager/wp-content/themes/dentoukougei/css/common.css">    <link rel="stylesheet" type="text/css" href="http://kougeihin.jp/system-manager/wp-content/themes/dentoukougei/css/style1.css">    <link rel="stylesheet" type="text/css" href="http://kougeihin.jp/system-manager/wp-content/themes/dentoukougei/css/style2.css">    <link rel="stylesheet" type="text/css" href="http://kougeihin.jp/system-manager/wp-content/themes/dentoukougei/css/style3.css">    <link rel="stylesheet" type="text/css" href="http://kougeihin.jp/system-manager/wp-content/themes/dentoukougei/css/style_publish.css">    <link rel="stylesheet" type="text/css" href="http://kougeihin.jp/system-manager/wp-content/themes/dentoukougei/css/print.css" media="print">    <link rel="stylesheet" type="text/css" href="http://kougeihin.jp/system-manager/wp-content/themes/dentoukougei/css/print2.css" media="print">    	<!--<link rel="profile" href="http://gmpg.org/xfn/11">	<link rel="pingback" href="http://kougeihin.jp/system-manager/xmlrpc.php">-->    	<!--[if lt IE 9]>	<script src="http://kougeihin.jp/system-manager/wp-content/themes/dentoukougei/js/html5.js"></script>	<![endif]-->            	<script>(function(){document.documentElement.className='js'})();</script>	<!-- All in One SEO Pack 2.3.14.2 by Michael Torbert of Semper Fi Web Design[134,152] --><meta name="description"  content="[metatags_description]" /><meta name="keywords"  content="[metatags_keywords]" /><link rel='next' href='http://kougeihin.jp/page/2/' /><link rel="canonical" href="http://kougeihin.jp/" />			<script>			(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){			(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),			m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)			})(window,document,'script','//www.google-analytics.com/analytics.js','ga');			ga('create', 'UA-61254919-1', 'auto');						ga('send', 'pageview');			</script><!-- /all in one seo pack --><link rel='dns-prefetch' href='//s.w.org' />		<script type="text/javascript">			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/2.3\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/2.3\/svg\/","svgExt":".svg","source":{"concatemoji":"http:\/\/kougeihin.jp\/system-manager\/wp-includes\/js\/wp-emoji-release.min.js?ver=4.8"}};			!function(a,b,c){function d(a){var b,c,d,e,f=String.fromCharCode;if(!k||!k.fillText)return!1;switch(k.clearRect(0,0,j.width,j.height),k.textBaseline="top",k.font="600 32px Arial",a){case"flag":return k.fillText(f(55356,56826,55356,56819),0,0),b=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,56826,8203,55356,56819),0,0),c=j.toDataURL(),b===c&&(k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447),0,0),b=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447),0,0),c=j.toDataURL(),b!==c);case"emoji4":return k.fillText(f(55358,56794,8205,9794,65039),0,0),d=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55358,56794,8203,9794,65039),0,0),e=j.toDataURL(),d!==e}return!1}function e(a){var c=b.createElement("script");c.src=a,c.defer=c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f,g,h,i,j=b.createElement("canvas"),k=j.getContext&&j.getContext("2d");for(i=Array("flag","emoji4"),c.supports={everything:!0,everythingExceptFlag:!0},h=0;h<i.length;h++)c.supports[i[h]]=d(i[h]),c.supports.everything=c.supports.everything&&c.supports[i[h]],"flag"!==i[h]&&(c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&c.supports[i[h]]);c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&!c.supports.flag,c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.everything||(g=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",g,!1),a.addEventListener("load",g,!1)):(a.attachEvent("onload",g),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&&f.twemoji&&(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);		</script>		<style type="text/css">img.wp-smiley,img.emoji {	display: inline !important;	border: none !important;	box-shadow: none !important;	height: 1em !important;	width: 1em !important;	margin: 0 .07em !important;	vertical-align: -0.1em !important;	background: none !important;	padding: 0 !important;}</style><link rel='stylesheet' id='pinterestBadge-css'  href='http://kougeihin.jp/system-manager/wp-content/plugins/pinterest-badge/pinterest.css?ver=4.8' type='text/css' media='all' /><link rel='stylesheet' id='hctpc_stylesheet-css'  href='http://kougeihin.jp/system-manager/wp-content/plugins/captcha/css/front_end_style.css?ver=4.3.0' type='text/css' media='all' /><link rel='stylesheet' id='dashicons-css'  href='http://kougeihin.jp/system-manager/wp-includes/css/dashicons.min.css?ver=4.8' type='text/css' media='all' /><link rel='stylesheet' id='hctpc_desktop_style-css'  href='http://kougeihin.jp/system-manager/wp-content/plugins/captcha/css/desktop_style.css?ver=4.3.0' type='text/css' media='all' /><link rel='stylesheet' id='usces_default_css-css'  href='http://kougeihin.jp/system-manager/wp-content/plugins/usc-e-shop/css/usces_default.css?ver=1.9.3.1707051' type='text/css' media='all' /><link rel='stylesheet' id='usces_cart_css-css'  href='http://kougeihin.jp/system-manager/wp-content/plugins/usc-e-shop/css/usces_cart.css?ver=1.9.3.1707051' type='text/css' media='all' /><script type='text/javascript' src='http://kougeihin.jp/system-manager/wp-content/plugins/pinterest-badge/pinterest_wp.js?ver=4.8'></script><script type='text/javascript' src='http://kougeihin.jp/system-manager/wp-includes/js/jquery/jquery.js?ver=1.12.4'></script><script type='text/javascript' src='http://kougeihin.jp/system-manager/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.4.1'></script><link rel='https://api.w.org/' href='http://kougeihin.jp/wp-json/' /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://kougeihin.jp/system-manager/xmlrpc.php?rsd" /><link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://kougeihin.jp/system-manager/wp-includes/wlwmanifest.xml" /> 	<style type="text/css">	#contextual-help-link-wrap,	#wp-admin-bar-comments,	#wp-admin-bar-all-in-one-seo-pack,	#wp-content-media-buttons a.thickbox.button,	#mitumoriprint,	#nohinprint,	#billprint,	#receiptprint,	input[name="check[mitumoriprint]"],	input[name="check[nohinprint]"],	input[name="check[billprint]"],	input[name="check[receiptprint]"],	label[for="postcustom-hide"],	#itemoption	{display:none;}	 </style></head><body class="home blog desktop chrome" id="home"><div id="fb-root"></div><script>(function(d, s, id) {  var js, fjs = d.getElementsByTagName(s)[0];  if (d.getElementById(id)) return;  js = d.createElement(s); js.id = id;  js.src = "//connect.facebook.net/ja_JP/sdk.js#xfbml=1&version=v2.0";  fjs.parentNode.insertBefore(js, fjs);}(document, 'script', 'facebook-jssdk'));</script><div id="main_wrapper" class="home"><!-- == NAVIGATION ================================================= -->    <div id="navi_open_btn" class="tap click-effect">        <i class="fa fa-bars icon"></i>    </div>    <div id="global_navigation">    <div id="global_navigation_in" class="color6">        <ul>            <li class="home">[hrefx][hrefx][hrefx][hrefx][hrefx]</li>            <li class="news">[hrefx][hrefx][hrefx][hrefx][hrefx]</li>            <li class="aoyama">[hrefx][hrefx][hrefx][hrefx][hrefx]</li>            <li class="crafts">[hrefx][hrefx][hrefx][hrefx][hrefx]</li>            <li class="facility_top"><a href="http://kougeihin.jp/facility_top/" class="click-effect">            <span class="ja_view">体験施設を探す</span>            <span class="en_view">FACILITY Search</span>             <i class="fa fa-search "></i></a></li>            <li class="about">[hrefx][hrefx][hrefx][hrefx][hrefx]</li>            <li class="takumi">[hrefx][hrefx][hrefx][hrefx][hrefx]</li>            <li class="onlineshop">[hrefx][hrefx][hrefx][hrefx][hrefx]</li>        </ul>    </div>                <div class="header_wrap">                    <div class="language">                        <ul class="language_select"><!--                            --><li><a class="crosslanguage-translate-org" href="#">Japanese</a></li><!--                            --><li><a class="crosslanguage-translate-jaen" href="#">English</a></li><!--                            --><li><a class="crosslanguage-translate-jazhs" href="#">Chinese</a></li><!--                            --><li><a class="crosslanguage-translate-jako" href="#">Korean</a></li><!--                            --><li><a class="crosslanguage-translate-jafr" href="#">French</a></li><!--                        --></ul>                    </div>                                                            <div class="bnr_kaiin">                        [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]                    </div>                    <div class="bnr_mailmagazine">                        [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]                    </div>                                                            <div class="searchBox">                        <form action="http://kougeihin.jp" method="get">                            <input type="text" placeholder="キーワード" name="s" value=""><button><i class="fa fa-search"></i></button>                        </form>                    </div>                </div>    </div><!-- == MAIN ================================================= -->    <div id="main_wrapper_in">        <div class="contents">            <div class="logo">                <h1>[metatags_titlex],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex]</h1>            </div>                            <!--                <div class="header_wrap">                    <div class="language">                        <i class="fa fa-language"></i> <select>                            <option>Japanese</option>                            <option>English</option>                            <option>Chinese</option>                            <option>Korean</option>                        </select>                    </div>                                        <div class="searchBox">                        <form action="http://kougeihin.jp" method="get">                            <input type="text" placeholder="キーワード" name="s" value=""><button><i class="fa fa-search"></i></button>                        </form>                    </div>                </div>                -->			        <!-- == title ================================================= -->		<!-- == MAIN ================================================= -->            <!--<div class="logo">                <h1>[H1]</h1>            </div>-->                        <div class="social_wrap">                <ul>                    <li class="tw">[hrefx][hrefx][hrefx][hrefx]</li>                    <li class="yt">[hrefx][hrefx][hrefx][hrefx][hrefx]</li>                    <li class="fb">[hrefx][hrefx][hrefx][hrefx][hrefx]</li>                    <li class="pin">[hrefx][hrefx][hrefx][hrefx][hrefx]</li>                    <li class="gp">[hrefx][hrefx][hrefx][hrefx][hrefx]</li>                </ul>            </div>                        <div id="top_slide">                <!-- meta slider --><div style="max-width: 970px;" class="metaslider metaslider-flex metaslider-90 ml-slider">        <div id="metaslider_container_90">        <div id="metaslider_90">            <ul class="slides">                <li style="display: block; width: 100%;" class="slide-14835 ms-image">[hrefx][hrefx][hrefx][hrefx][hrefx]</li>                <li style="display: none; width: 100%;" class="slide-22243 ms-image">[hrefx][hrefx][hrefx][hrefx][hrefx]<div class="caption-wrap"><div class="caption"><p class="ja"><span style="color: #ffffff;">TOKYO職人展<br>8月16日まで開中</span></p></div></div></li>                <li style="display: none; width: 100%;" class="slide-22244 ms-image">[hrefx][hrefx][hrefx][hrefx][hrefx]<div class="caption-wrap"><div class="caption"><p class="ja"><span style="color: #000000;">TOKYO職人展<br>8月16日まで開中</span></p></div></div></li>                <li style="display: none; width: 100%;" class="slide-22245 ms-image">[hrefx][hrefx][hrefx][hrefx][hrefx]<div class="caption-wrap"><div class="caption"><p class="ja"><span style="color: #000000;">TOKYO職人展<br>8月16日まで開中</span></p></div></div></li>                <li style="display: none; width: 100%;" class="slide-22246 ms-image">[hrefx][hrefx][hrefx][hrefx][hrefx]<div class="caption-wrap"><div class="caption"><p class="ja"><span style="color: #000000;">TOKYO職人展<br>8月16日まで開中</span></p></div></div></li>                <li style="display: none; width: 100%;" class="slide-14896 ms-image">[hrefx][hrefx][hrefx][hrefx][hrefx]</li>                <li style="display: none; width: 100%;" class="slide-22247 ms-image">[hrefx][hrefx][hrefx][hrefx][hrefx]<div class="caption-wrap"><div class="caption"><p class="ja"><span style="color: #000000;">TOKYO職人展<br>8月16日まで開中</span></p></div></div></li>                <li style="display: none; width: 100%;" class="slide-22248 ms-image">[hrefx][hrefx][hrefx][hrefx][hrefx]<div class="caption-wrap"><div class="caption"><p class="ja"><span style="color: #000000;">TOKYO職人展<br>8月16日まで開中</span></p></div></div></li>                <li style="display: none; width: 100%;" class="slide-22249 ms-image">[hrefx][hrefx][hrefx][hrefx][hrefx]<div class="caption-wrap"><div class="caption"><p class="ja"><span style="color: #000000;">TOKYO職人展<br>8月16日まで開中</span></p></div></div></li>                <li style="display: none; width: 100%;" class="slide-22250 ms-image">[hrefx][hrefx][hrefx][hrefx][hrefx]<div class="caption-wrap"><div class="caption"><p class="ja"><span style="color: #000000;">TOKYO職人展<br>8月16日まで開中</span></p></div></div></li>                <li style="display: none; width: 100%;" class="slide-22251 ms-image">[hrefx][hrefx][hrefx][hrefx][hrefx]<div class="caption-wrap"><div class="caption"><p class="ja"><span style="color: #000000;">TOKYO職人展<br>8月16日まで開中</span></p></div></div></li>            </ul>        </div>            </div>    <script type="text/javascript">        var metaslider_90 = function($) {            $('#metaslider_90').addClass('flexslider'); // theme/plugin conflict avoidance            $('#metaslider_90').flexslider({                 slideshowSpeed:6000,                animation:"fade",                controlNav:true,                directionNav:false,                pauseOnHover:false,                direction:"horizontal",                reverse:false,                animationSpeed:2000,                prevText:"&lt;",                nextText:"&gt;",                slideshow:true            });        };        var timer_metaslider_90 = function() {            var slider = !window.jQuery ? window.setTimeout(timer_metaslider_90, 100) : !jQuery.isReady ? window.setTimeout(timer_metaslider_90, 1) : metaslider_90(window.jQuery);        };        timer_metaslider_90();    </script></div><!--// meta slider--><div class='mlCaptionsData'><p class="ja"><span style="color: #ffffff;">TOKYO職人展<br>8月16日まで開中</span></p><p class="ja"><span style="color: #000000;">TOKYO職人展<br>8月16日まで開中</span></p><p class="ja"><span style="color: #000000;">TOKYO職人展<br>8月16日まで開中</span></p><p class="ja"><span style="color: #000000;">TOKYO職人展<br>8月16日まで開中</span></p><p class="ja"><span style="color: #000000;">TOKYO職人展<br>8月16日まで開中</span></p><p class="ja"><span style="color: #000000;">TOKYO職人展<br>8月16日まで開中</span></p><p class="ja"><span style="color: #000000;">TOKYO職人展<br>8月16日まで開中</span></p><p class="ja"><span style="color: #000000;">TOKYO職人展<br>8月16日まで開中</span></p><p class="ja"><span style="color: #000000;">TOKYO職人展<br>8月16日まで開中</span></p></div>            </div>            <div class="index_top_news">				<div class="top_news_title"><h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>[hrefx]</div>                <div class="box" data-link-url="http://kougeihin.jp/exhibition/20170811_tokyo/">                    					                                                   <div class="thumb"> [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]</div>                                                                                    <div class="detail ">                        <div class="date"><i class="fa fa-calendar-o"></i> 2017/8/11(金)〜2017/8/16(水)</div>                        <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>                        <p>東京で物を作り続ける匠たちが、今年の夏も青山スクエアに来ました。開催期間中は毎日15時から青山スクエア内でミニセミナーも行っていますので、お気軽にお越しください。...</p>                    </div>                </div>            </div>            <div class="index_ec_bnr">				                [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]            </div>                                    <div class="index_topics">                <div class="col col-1 wow fadeInDown click-effect" data-link-url="aoyama/" data-wow-delay="0.0s">                    <div class="thumb">                        <img src="http://kougeihin.jp/system-manager/wp-content/themes/dentoukougei/images/top/img01.png">                    </div>                    <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>                    <div class="detail">                        地球環境にやさしい天然の素材を使った全国各地の伝統的工芸品が一堂に集まる日本唯一のギャラリー＆ショップです。                    </div>                    <div class="btns">                                                [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]                    </div>                </div>                <div class="col col-2 wow fadeInDown click-effect" data-link-url="crafts/" data-wow-delay="0.25s">                    <div class="thumb">                        <img src="http://kougeihin.jp/system-manager/wp-content/themes/dentoukougei/images/top/img03.png">                    </div>                    <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>                    <div class="detail">                        各産地の特色ある伝統工芸品を探しに行きましょう！                    </div>                    <div class="btns">						                        [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]                    </div>                </div>                <div class="col col-3 wow fadeInDown click-effect" data-link-url="association/" data-wow-delay="0.5s">                    <div class="thumb">                        <img src="http://kougeihin.jp/system-manager/wp-content/themes/dentoukougei/images/top/img04.png">                    </div>                    <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>                    <div class="detail">                        一般財団法人伝統的工芸品産業振興協会のご案内。各種工芸品資料等                    </div>                    <div class="btns">                                                [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]                    </div>                </div>            </div>            			<div class="index_hall"><a class="btn_more_hall" href="http://kougeihin.jp/association/hall/">全国伝統工芸会館情報はコチラ ＞</a></div>            			<div id="pallax1" class="pallaxBox" style="background-image:url(http://kougeihin.jp/system-manager/wp-content/uploads/20170728_o15.jpg);">                <div class="text">Contents News</div>            </div>                        <div class="index_middle_box">                <dl class="box left_box wow pulse" data-wow-delay="0.0s">                    <dt><h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>[hrefx]</dt>                    <dd data-link-url="http://kougeihin.jp/web_info/20170714_seminar/" class="mh-box1">						                        <div class="detail no_thumb">							                            <h4>海外展開支援セミナーの開催について<br>(東京開催8/28　大阪開催8/24)<br><平成29年度 第2回></h4>                            <p>　一般財団法人 伝統的工芸品産業振興協会では、海外への事業展開を検討中の産地関係者の皆様向けに、参加無料のセミナーおよび...</p>							<div class="date"><i class="fa fa-clock-o"></i> 2017/7/13(木)</div>							                        </div>                    </dd>                </dl>                <dl class="box right_box wow pulse" data-wow-delay="0.5s">                    <dt><h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>[hrefx][hrefx][hrefx][hrefx][hrefx]</dt>                    <dd data-link-url="http://kougeihin.jp/aoyama_info/20170721_blog/" class="mh-box1">						                        <div class="thumb">							<img width="150" height="150" src="http://kougeihin.jp/system-manager/wp-content/uploads/20170714_t01-150x150.jpg" class="attachment-thumbnail size-thumbnail wp-post-image" alt="" />                        </div>						                        <div class="detail ">                            <h4>【ブログ更新】和くらし大好き！　集まれ女匠衆　第一部のトークショー</h4>                            <p>&nbsp;&nbsp;青山スクエアブログ、「和くらし大好き！　集まれ女匠衆　第一部のトークショー」を更新し...</p>							<div class="date"><i class="fa fa-clock-o"></i> 2017/7/21(金)</div>                        </div>                    </dd>                </dl>            </div>                        <div class="index_contents_box">                <dl class="box left_box wow pulse" data-wow-delay="0s">                    <dt><h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3></dt>                    <dd>                        <div class="thumb">                            <img src="http://kougeihin.jp/system-manager/wp-content/themes/dentoukougei/images/top/img05.png">                        </div>                        <div class="detail">                            <p>全国産地からの「匠の技」を定期的に発信しています。</p>                            <div class="btns">                                                                [hrefx]                            </div>                        </div>                    </dd>                </dl>                <dl class="box right_box wow pulse" data-wow-delay="0.5s">                    <dt><h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3></dt>                    <dd>                        <div class="thumb">                            <img src="http://kougeihin.jp/system-manager/wp-content/themes/dentoukougei/images/top/img02.png">                        </div>                        <div class="detail">                            <p>必見！「匠の技」を映像で公開。</p>                            <div class="btns">                                [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]                            </div>                        </div>                    </dd>                </dl>            </div>            			<div id="pallax2" class="pallaxBox" style="background-image:url(http://kougeihin.jp/system-manager/wp-content/uploads/20170728_o16.jpg);">                <div class="text">Online Shopping</div>            </div>                        <!-- オススメ -->            <div class="index_ec_bnr">				<div id="ec_top_reco_wrap">    <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>    <div class="recommend_wrap">        <div class="recommend">            <div class="column_list online_list">                <div class="box js-matchHeight scaleImage box_1">    <div class="box_in">        <div class="thumbnail js-thumbnailCover">        <a href="http://kougeihin.jp/shop/7100850300039/" class="priority-link click-effect">			<img width="1024" height="683" src="http://kougeihin.jp/system-manager/wp-content/uploads/7100850300039.jpg" class="attachment-9999x9999 size-9999x9999" alt="7100850300039" srcset="http://kougeihin.jp/system-manager/wp-content/uploads/7100850300039.jpg 1024w, http://kougeihin.jp/system-manager/wp-content/uploads/7100850300039-600x400.jpg 600w, http://kougeihin.jp/system-manager/wp-content/uploads/7100850300039-768x512.jpg 768w, http://kougeihin.jp/system-manager/wp-content/uploads/7100850300039-700x467.jpg 700w, http://kougeihin.jp/system-manager/wp-content/uploads/7100850300039-300x200.jpg 300w, http://kougeihin.jp/system-manager/wp-content/uploads/7100850300039-235x157.jpg 235w, http://kougeihin.jp/system-manager/wp-content/uploads/7100850300039-290x193.jpg 290w, http://kougeihin.jp/system-manager/wp-content/uploads/7100850300039-350x233.jpg 350w, http://kougeihin.jp/system-manager/wp-content/uploads/7100850300039-650x434.jpg 650w, http://kougeihin.jp/system-manager/wp-content/uploads/7100850300039-198x132.jpg 198w" sizes="(max-width: 1024px) 100vw, 1024px" />                    </a>        </div>                <div class="title_wrap">                    <div class="category_wrap">                                                        <span class="category">おすすめ商品</span>                                                                                                                                                                                        <span class="classify">木工品・竹工品</span>                                                    <span class="pref">秋田県</span>                        </div>                                <div class="icon_new"><span>NEW</span></div>			                        <p class="kougeihin">大館曲げわっぱ</p>            <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>                            <div class="price">¥5,000<em class="tax">（税別）</em></div>                    </div>    </div></div><div class="box js-matchHeight scaleImage box_2">    <div class="box_in">        <div class="thumbnail js-thumbnailCover">        <a href="http://kougeihin.jp/shop/7100827300178/" class="priority-link click-effect">			<img width="1024" height="683" src="http://kougeihin.jp/system-manager/wp-content/uploads/7100827300178.jpg" class="attachment-9999x9999 size-9999x9999" alt="7100827300178" srcset="http://kougeihin.jp/system-manager/wp-content/uploads/7100827300178.jpg 1024w, http://kougeihin.jp/system-manager/wp-content/uploads/7100827300178-600x400.jpg 600w, http://kougeihin.jp/system-manager/wp-content/uploads/7100827300178-768x512.jpg 768w, http://kougeihin.jp/system-manager/wp-content/uploads/7100827300178-700x467.jpg 700w, http://kougeihin.jp/system-manager/wp-content/uploads/7100827300178-300x200.jpg 300w, http://kougeihin.jp/system-manager/wp-content/uploads/7100827300178-235x157.jpg 235w, http://kougeihin.jp/system-manager/wp-content/uploads/7100827300178-290x193.jpg 290w, http://kougeihin.jp/system-manager/wp-content/uploads/7100827300178-350x233.jpg 350w, http://kougeihin.jp/system-manager/wp-content/uploads/7100827300178-650x434.jpg 650w, http://kougeihin.jp/system-manager/wp-content/uploads/7100827300178-198x132.jpg 198w" sizes="(max-width: 1024px) 100vw, 1024px" />                    </a>        </div>                <div class="title_wrap">                    <div class="category_wrap">                                                                                            <span class="category">おすすめ商品</span>                                                                                                                                                                                        <span class="classify">染色品</span>                                                    <span class="pref">東京都</span>                        </div>                                            <p class="kougeihin">東京手描友禅</p>            <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>                            <div class="price">¥15,000<em class="tax">（税別）</em></div>                    </div>    </div></div><div class="box js-matchHeight scaleImage box_3">    <div class="box_in">        <div class="thumbnail js-thumbnailCover">        <a href="http://kougeihin.jp/shop/7100850300022/" class="priority-link click-effect">			<img width="1024" height="683" src="http://kougeihin.jp/system-manager/wp-content/uploads/7100850300022-e1490500820893.jpg" class="attachment-9999x9999 size-9999x9999" alt="7100850300022" />                    </a>        </div>                <div class="title_wrap">                    <div class="category_wrap">                                                        <span class="category">おすすめ商品</span>                                                                                                                                                    <span class="classify">木工品・竹工品</span>                                                    <span class="pref">秋田県</span>                        </div>                                            <p class="kougeihin">大館曲げわっぱ</p>            <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>                            <div class="price">¥11,000<em class="tax">（税別）</em></div>                    </div>    </div></div><div class="box js-matchHeight scaleImage box_4">    <div class="box_in">        <div class="thumbnail js-thumbnailCover">        <a href="http://kougeihin.jp/shop/7100830800269/" class="priority-link click-effect">			<img width="1024" height="683" src="http://kougeihin.jp/system-manager/wp-content/uploads/7100830800269.jpg" class="attachment-9999x9999 size-9999x9999" alt="7100830800269" srcset="http://kougeihin.jp/system-manager/wp-content/uploads/7100830800269.jpg 1024w, http://kougeihin.jp/system-manager/wp-content/uploads/7100830800269-600x400.jpg 600w, http://kougeihin.jp/system-manager/wp-content/uploads/7100830800269-768x512.jpg 768w, http://kougeihin.jp/system-manager/wp-content/uploads/7100830800269-700x467.jpg 700w, http://kougeihin.jp/system-manager/wp-content/uploads/7100830800269-300x200.jpg 300w, http://kougeihin.jp/system-manager/wp-content/uploads/7100830800269-235x157.jpg 235w, http://kougeihin.jp/system-manager/wp-content/uploads/7100830800269-290x193.jpg 290w, http://kougeihin.jp/system-manager/wp-content/uploads/7100830800269-350x233.jpg 350w, http://kougeihin.jp/system-manager/wp-content/uploads/7100830800269-650x434.jpg 650w, http://kougeihin.jp/system-manager/wp-content/uploads/7100830800269-198x132.jpg 198w" sizes="(max-width: 1024px) 100vw, 1024px" />                    </a>        </div>                <div class="title_wrap">                    <div class="category_wrap">                                                        <span class="category">おすすめ商品</span>                                                                                                                                                    <span class="classify">陶磁器</span>                                                    <span class="pref">愛知県</span>                        </div>                                            <p class="kougeihin">赤津焼</p>            <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>                            <div class="price">¥4,000<em class="tax">（税別）</em></div>                    </div>    </div></div><div class="box js-matchHeight scaleImage box_5">    <div class="box_in">        <div class="thumbnail js-thumbnailCover">        <a href="http://kougeihin.jp/shop/7100842200125/" class="priority-link click-effect">			<img width="1024" height="683" src="http://kougeihin.jp/system-manager/wp-content/uploads/7100842200125-01.jpg" class="attachment-9999x9999 size-9999x9999" alt="7100842200125" srcset="http://kougeihin.jp/system-manager/wp-content/uploads/7100842200125-01.jpg 1024w, http://kougeihin.jp/system-manager/wp-content/uploads/7100842200125-01-600x400.jpg 600w, http://kougeihin.jp/system-manager/wp-content/uploads/7100842200125-01-768x512.jpg 768w, http://kougeihin.jp/system-manager/wp-content/uploads/7100842200125-01-700x467.jpg 700w, http://kougeihin.jp/system-manager/wp-content/uploads/7100842200125-01-300x200.jpg 300w, http://kougeihin.jp/system-manager/wp-content/uploads/7100842200125-01-235x157.jpg 235w, http://kougeihin.jp/system-manager/wp-content/uploads/7100842200125-01-290x193.jpg 290w, http://kougeihin.jp/system-manager/wp-content/uploads/7100842200125-01-350x233.jpg 350w, http://kougeihin.jp/system-manager/wp-content/uploads/7100842200125-01-650x434.jpg 650w, http://kougeihin.jp/system-manager/wp-content/uploads/7100842200125-01-198x132.jpg 198w" sizes="(max-width: 1024px) 100vw, 1024px" />                    </a>        </div>                <div class="title_wrap">                    <div class="category_wrap">                                                        <span class="category">おすすめ商品</span>                                                                                                                                                                                        <span class="classify">漆器</span>                                                    <span class="pref">和歌山県</span>                        </div>                                            <p class="kougeihin">紀州漆器</p>            <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>                            <div class="price">¥85,000<em class="tax">（税別）</em></div>                    </div>    </div></div><div class="box js-matchHeight scaleImage box_6">    <div class="box_in">        <div class="thumbnail js-thumbnailCover">        <a href="http://kougeihin.jp/shop/7100832100022/" class="priority-link click-effect">			<img width="1024" height="683" src="http://kougeihin.jp/system-manager/wp-content/uploads/7100832100022-e1476428075177.jpg" class="attachment-9999x9999 size-9999x9999" alt="7100832100022" />                    </a>        </div>                <div class="title_wrap">                    <div class="category_wrap">                                                        <span class="category">おすすめ商品</span>                                                                                                                                                                                                                            <span class="classify">陶磁器</span>                                                    <span class="pref">山口県</span>                        </div>                                            <p class="kougeihin">萩焼</p>            <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>                            <div class="price">¥8,000<em class="tax">（税別）</em></div>                    </div>    </div></div><div class="box js-matchHeight scaleImage box_7">    <div class="box_in">        <div class="thumbnail js-thumbnailCover">        <a href="http://kougeihin.jp/shop/7100830700064/" class="priority-link click-effect">			<img width="1024" height="683" src="http://kougeihin.jp/system-manager/wp-content/uploads/7100830700064.jpg" class="attachment-9999x9999 size-9999x9999" alt="7100830700064" srcset="http://kougeihin.jp/system-manager/wp-content/uploads/7100830700064.jpg 1024w, http://kougeihin.jp/system-manager/wp-content/uploads/7100830700064-600x400.jpg 600w, http://kougeihin.jp/system-manager/wp-content/uploads/7100830700064-768x512.jpg 768w, http://kougeihin.jp/system-manager/wp-content/uploads/7100830700064-700x467.jpg 700w, http://kougeihin.jp/system-manager/wp-content/uploads/7100830700064-300x200.jpg 300w, http://kougeihin.jp/system-manager/wp-content/uploads/7100830700064-235x157.jpg 235w, http://kougeihin.jp/system-manager/wp-content/uploads/7100830700064-290x193.jpg 290w, http://kougeihin.jp/system-manager/wp-content/uploads/7100830700064-350x233.jpg 350w, http://kougeihin.jp/system-manager/wp-content/uploads/7100830700064-650x434.jpg 650w, http://kougeihin.jp/system-manager/wp-content/uploads/7100830700064-198x132.jpg 198w" sizes="(max-width: 1024px) 100vw, 1024px" />                    </a>        </div>                <div class="title_wrap">                    <div class="category_wrap">                                                        <span class="category">おすすめ商品</span>                                                                                                                                                                                                                                                                                                    <span class="classify">陶磁器</span>                                                    <span class="pref">愛知県</span>                        </div>                                            <p class="kougeihin">常滑焼</p>            <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>                            <div class="price">¥15,000<em class="tax">（税別）</em></div>                    </div>    </div></div><div class="box js-matchHeight scaleImage box_8">    <div class="box_in">        <div class="thumbnail js-thumbnailCover">        <a href="http://kougeihin.jp/shop/7100830900013/" class="priority-link click-effect">			<img width="1024" height="683" src="http://kougeihin.jp/system-manager/wp-content/uploads/7100830900013-02.jpg" class="attachment-9999x9999 size-9999x9999" alt="7100830900013" srcset="http://kougeihin.jp/system-manager/wp-content/uploads/7100830900013-02.jpg 1024w, http://kougeihin.jp/system-manager/wp-content/uploads/7100830900013-02-600x400.jpg 600w, http://kougeihin.jp/system-manager/wp-content/uploads/7100830900013-02-768x512.jpg 768w, http://kougeihin.jp/system-manager/wp-content/uploads/7100830900013-02-700x467.jpg 700w, http://kougeihin.jp/system-manager/wp-content/uploads/7100830900013-02-300x200.jpg 300w, http://kougeihin.jp/system-manager/wp-content/uploads/7100830900013-02-235x157.jpg 235w, http://kougeihin.jp/system-manager/wp-content/uploads/7100830900013-02-290x193.jpg 290w, http://kougeihin.jp/system-manager/wp-content/uploads/7100830900013-02-350x233.jpg 350w, http://kougeihin.jp/system-manager/wp-content/uploads/7100830900013-02-650x434.jpg 650w, http://kougeihin.jp/system-manager/wp-content/uploads/7100830900013-02-198x132.jpg 198w" sizes="(max-width: 1024px) 100vw, 1024px" />                    </a>        </div>                <div class="title_wrap">                    <div class="category_wrap">                                                        <span class="category">おすすめ商品</span>                                                                                                                                                                                                                                                                <span class="classify">陶磁器</span>                                                    <span class="pref">愛知県</span>                        </div>                                            <p class="kougeihin">瀬戸染付焼</p>            <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>                            <div class="price">¥8,000<em class="tax">（税別）</em></div>                    </div>    </div></div>            </div>        </div>        <div class="btn_back_wrap">[hrefx][hrefx][hrefx][hrefx][hrefx]</div>        <div class="btn_next_wrap">[hrefx][hrefx][hrefx][hrefx][hrefx]</div>    </div>    <p class="more_ec"><a class="btn" href="http://kougeihin.jp/onlineshop?picup=reco">おすすめ商品をもっと見る ＞</a></p></div>            </div>            <!-- //オススメ -->            <div class="index_sns_area" style="border-top:0;">                <div class="box box_pin">									<a data-pin-do="embedUser" href="http://jp.pinterest.com/densanaoyama/" data-pin-scale-width="114" data-pin-scale-height="393" data-pin-board-width="350">Visit Pinterest's profile on Pinterest.</a>									<script type="text/javascript" async defer src="//assets.pinterest.com/js/pinit.js"></script>                </div>                <div class="box box_fb">										<div class="fb-like-box" data-href="https://www.facebook.com/pages/%E4%BC%9D%E7%B5%B1%E5%B7%A5%E8%8A%B8-%E9%9D%92%E5%B1%B1%E3%82%B9%E3%82%AF%E3%82%A8%E3%82%A2-Traditional-Crafts-of-Japan/178401009001466" data-width="400" data-height="500" data-colorscheme="light" data-show-faces="true" data-header="true" data-stream="true" data-show-border="true"></div>					                </div>            </div>                        <!--<ul class="index_banners">                <li class="" data-wow-delay="0.0s">[hrefx]</li>                <li class="" data-wow-delay="0.4s">[hrefx]</li>                <li class="" data-wow-delay="0.8s">[hrefx]</li>            </ul>-->                		<ul class="index_banners">        			<li>[hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]</li>						<li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>						<li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>						<li>[hrefx][hrefx][hrefx][hrefx]</li>						<li>[hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]</li>						<li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>						<li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>						<li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>					</ul>                        <div class="pagetop">                <img src="http://kougeihin.jp/system-manager/wp-content/themes/dentoukougei/images/common/pagetop.png" class="pageTopBtn">            </div>                    </div><!-- == FOOTER ================================================= -->        <div id="footer">            <ul class="footer_nav"><!--                --><li><i class="fa fa-chevron-right"></i> [hrefx]</li>            </ul>            <p class="inc">著作権法により認められている範囲の引用や私的利用等を除き、当サイトに掲載されている文章・写真・イラスト等の無断使用は禁じられています。</p>            <address>Copyright &copy; 2009 - 2016 一般財団法人 伝統的工芸品産業振興協会 All Rights Reserved.</address>        </div>    </div></div><!--input type="button" class="crosslanguage-translate-org" value="日本語"><input type="button" class="crosslanguage-translate-jaen" value="英語"--><!-- Analytics --><!-- SCRIPT --><script>	var __IS_MOBILE = false;</script><script src="http://kougeihin.jp/system-manager/wp-content/themes/dentoukougei/js/lib/modernizr.js"></script><!--<script src="https://code.jquery.com/jquery-1.11.2.min.js"></script><script>window.jQuery || document.write('<script src="http://kougeihin.jp/system-manager/wp-content/themes/dentoukougei/js/lib/jquery-1.11.2.min.js"><\/script>')</script>--><script src="http://kougeihin.jp/system-manager/wp-content/themes/dentoukougei/js/lib/jquery.finger.min.js"></script><script src="http://kougeihin.jp/system-manager/wp-content/themes/dentoukougei/js/lib/jquery.parallax-1.1.3.js"></script><script src="http://kougeihin.jp/system-manager/wp-content/themes/dentoukougei/js/lib/wow.js"></script><!-- // 2015.05.15 削除処理 --><!-- script src="http://kougeihin.jp/system-manager/wp-content/themes/dentoukougei/js/lib/scroll.js"></script --><script src="http://kougeihin.jp/system-manager/wp-content/themes/dentoukougei/js/lib/transition.js"></script><script src="http://kougeihin.jp/system-manager/wp-content/themes/dentoukougei/js/lib/jquery.matchHeight-min.js"></script><link rel="stylesheet" type="text/css" href="http://kougeihin.jp/system-manager/wp-content/themes/dentoukougei/fancybox/jquery.fancybox.css"><script src="http://kougeihin.jp/system-manager/wp-content/themes/dentoukougei/fancybox/jquery.fancybox.js"></script><script src="http://kougeihin.jp/system-manager/wp-content/themes/dentoukougei/js/lib.js"></script><script src="http://kougeihin.jp/system-manager/wp-content/themes/dentoukougei/js/common.js"></script><script src="//transer.com/atasp/pagetrans2/crosslanguage-translate.php?clientid=oo" ></script><link rel="stylesheet" href="http://kougeihin.jp/system-manager/wp-content/themes/dentoukougei/owl-carousel/owl.carousel.css"><link rel="stylesheet" href="http://kougeihin.jp/system-manager/wp-content/themes/dentoukougei/owl-carousel/owl.theme.css"><script src="http://kougeihin.jp/system-manager/wp-content/themes/dentoukougei/owl-carousel/owl.carousel.js"></script><script>jQuery(function(){    var $p1 = $('#pallax1');    var $p2 = $('#pallax2');    $p1.parallax("50%", 0.40);    $p2.parallax("50%", 0.40);        $('.index_pickup_items').owlCarousel({        items:3,        itemsTablet:false,        itemsDesktop:false,        itemsDesktopSmall:false,        itemsMobile:[768,1],		slideSpeed:500,		rewindSpeed:500,        navigation:true,        navigationText:[            '<i class="prev fa fa-chevron-left"></i>',            '<i class="next fa fa-chevron-right"></i>'        ],            });		$('.mh-box1').matchHeight();        var $top_li = $('#metaslider_90').find('li');    $top_li.each(function(){        var $li = $(this);        var $img = $li.find('.slider-90');        var $parent = $img.parent('a');        if($parent.length){            var $wrap = $li.find('.caption-wrap');            $wrap.addClass('hasLink');            $wrap.on('click',function(){                window.location.href = $parent.attr('href');            });        }    });    //slider-90});</script>	<script type='text/javascript'>		uscesL10n = {									'ajaxurl': "http://kougeihin.jp/system-manager/wp-admin/admin-ajax.php",			'loaderurl': "http://kougeihin.jp/system-manager/wp-content/plugins/usc-e-shop/images/loading.gif",			'post_id': "22155",			'cart_number': "1386",			'is_cart_row': false,			'opt_esse': new Array(  ),			'opt_means': new Array(  ),			'mes_opts': new Array(  ),			'key_opts': new Array(  ), 			'previous_url': "http://kougeihin.jp", 			'itemRestriction': "",			'uscespage': "wp_search",			'uscesid': "MGQzMzdiNmIzOTlhMjM4NTlmOGMxMWUyNDE2N2YzMDUxMzZlNmMzOTM2MjhmNTFkX2FjdGluZ18wX0E%3D",			'wc_nonce': "ccbb360eec"		}	</script>	<script type='text/javascript' src='http://kougeihin.jp/system-manager/wp-content/plugins/usc-e-shop/js/usces_cart.js'></script><!-- Welcart version : v1.9.3.1707051 --><link rel='stylesheet' id='metaslider-flex-slider-css'  href='http://kougeihin.jp/system-manager/wp-content/plugins/ml-slider/assets/sliders/flexslider/flexslider.css?ver=3.5.1' type='text/css' media='all' property='stylesheet' /><link rel='stylesheet' id='metaslider-public-css'  href='http://kougeihin.jp/system-manager/wp-content/plugins/ml-slider/assets/metaslider/public.css?ver=3.5.1' type='text/css' media='all' property='stylesheet' /><script type='text/javascript' src='http://kougeihin.jp/system-manager/wp-includes/js/wp-embed.min.js?ver=4.8'></script><script type='text/javascript' src='http://kougeihin.jp/system-manager/wp-content/plugins/ml-slider/assets/sliders/flexslider/jquery.flexslider-min.js?ver=3.5.1'></script><script type="text/javascript" src="//typesquare.com/accessor/script/typesquare.js?K1ZXMyf6~T0%3D" charset="utf-8"></script></body></html>  
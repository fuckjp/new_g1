<!DOCTYPE html><html lang="jp" class="nojs bolg--download bk-solid"><head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# article: http://ogp.me/ns/article#"><meta http-equiv="Content-Type" charset="UTF-8" /><title>[metatags_title]</title><meta name="viewport" content="width=device-width, initial-scale=1.0"><meta name="description" content="[metatags_description]"><meta name="keywords" content=""><meta name="twitter:card" content="summary_large_image"><meta name="format-detection" content="telephone=no"><meta name="theme-color" content="#006450"><meta property="article:publisher" content="https://www.facebook.com/afternoontea.jp"><meta property="og:title" content="[metatags_title]"><meta property="og:description" content="[metatags_description]"><meta property="og:type" content="article"><meta property="og:image" content="https://www.afternoon-tea.net/media/images/general/afternoontea.png"><meta http-equiv="X-UA-Compatible" content="IE=edge"><link rel="manifest" href="/manifest.json"><link rel="mask-icon" href="/safari-pinned-tab.svg" color="#006450"><link rel="alternate" type="application/atom+xml" title="Recent Entries" href="/atom.xml"><link rel="canonical" href="https://www.afternoon-tea.net/download/"><link href="/media/css/common-pc.css" media="(min-width:768px)" rel="stylesheet"><link href="/media/css/common-sp.css" media="(max-width:767px)" rel="stylesheet"><script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');  ga('create', 'UA-54173264-1', 'auto');  ga('send', 'pageview');</script><script src="/info/notice.js"></script><script src="/shop-list/shopdata.js"></script><script src="/media/js/script.js"></script></head><body><div id="wrap"><main>  <div id="wrap-main" class="wrap-content">    <h1>[metatags_titlex],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex]</h1>    <div class="area-wallpaper m-b-10-sp">      <div class="l-wrap">    <section id="201708" class="area-wallpaper-month">    <h2>[metatags_titlex],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex]</h2>    <div class="l-column-2">                                                                                                                                                                                                                                                                                            <div class="l-column-sub l-wide-480 box-wallpaper-wrap">      <div class="box-wallpaper" tabindex="0">        <img class="img-wallpaper pc" src="/media/images/download/1708LIVING_A_460259_thumb.jpg" width="460" height="259" alt="">        [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]        <div class="box-wallpaper-link pc">          <dl class="list-wallaper-link single">                          <dt>1920×1080 ｜ 1366×768</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1708LIVING_A_19201080.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1708LIVING_A_19201080.jpg">DOWNLOAD（363.3 KB）</a>              </dd>                                      <dt>1280×1024</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1708LIVING_A_12801024.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1708LIVING_A_12801024.jpg">DOWNLOAD（308.9 KB）</a>              </dd>                                      <dt>1440×900 ｜ 1280×800</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1708LIVING_A_1440900.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1708LIVING_A_1440900.jpg">DOWNLOAD（245.4 KB）</a>              </dd>                                  </dl>        </div>      </div>    </div>                                                                                                                                                                                                                                                                                                                                                                                                                                <div class="l-column-sub l-wide-480 box-wallpaper-wrap">      <div class="box-wallpaper" tabindex="0">        <img class="img-wallpaper pc" src="/media/images/download/1708LIVING_B_460259_thumb.jpg" width="460" height="259" alt="">        [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]        <div class="box-wallpaper-link pc">          <dl class="list-wallaper-link single">                          <dt>1920×1080 ｜ 1366×768</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1708LIVING_B_19201080.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1708LIVING_B_19201080.jpg">DOWNLOAD（662.9 KB）</a>              </dd>                                      <dt>1280×1024</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1708LIVING_B_12801024.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1708LIVING_B_12801024.jpg">DOWNLOAD（434.8 KB）</a>              </dd>                                      <dt>1440×900 ｜ 1280×800</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1708LIVING_B_1440900.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1708LIVING_B_1440900.jpg">DOWNLOAD（1.6 MB）</a>              </dd>                                  </dl>        </div>      </div>    </div>                                                                                                                                                                                                                                                                                                                                                                                                                                <div class="l-column-sub l-wide-480 box-wallpaper-wrap">      <div class="box-wallpaper" tabindex="0">        <img class="img-wallpaper pc" src="/media/images/download/1708TEAROOM_A_460259_thumb.jpg" width="460" height="259" alt="">        [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]        <div class="box-wallpaper-link pc">          <dl class="list-wallaper-link single">                          <dt>1920×1080 ｜ 1366×768</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1708TEAROOM_A_19201080.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1708TEAROOM_A_19201080.jpg">DOWNLOAD（371.8 KB）</a>              </dd>                                      <dt>1280×1024</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1708TEAROOM_A_12801024.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1708TEAROOM_A_12801024.jpg">DOWNLOAD（1.1 MB）</a>              </dd>                                      <dt>1440×900 ｜ 1280×800</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1708TEAROOM_A_1440900.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1708TEAROOM_A_1440900.jpg">DOWNLOAD（263.2 KB）</a>              </dd>                                  </dl>        </div>      </div>    </div>                                                                                                                                                                                                                                                                                                                                                                                                                                <div class="l-column-sub l-wide-480 box-wallpaper-wrap">      <div class="box-wallpaper" tabindex="0">        <img class="img-wallpaper pc" src="/media/images/download/1708TEAROOM_B_460259_thumb.jpg" width="460" height="259" alt="">        [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]        <div class="box-wallpaper-link pc">          <dl class="list-wallaper-link single">                          <dt>1920×1080 ｜ 1366×768</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1708TEAROOM_B_19201080.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1708TEAROOM_B_19201080.jpg">DOWNLOAD（160.7 KB）</a>              </dd>                                      <dt>1280×1024</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1708TEAROOM_B_12801024.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1708TEAROOM_B_12801024.jpg">DOWNLOAD（137.7 KB）</a>              </dd>                                      <dt>1440×900 ｜ 1280×800</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1708TEAROOM_B_1440900.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1708TEAROOM_B_1440900.jpg">DOWNLOAD（430.8 KB）</a>              </dd>                                  </dl>        </div>      </div>    </div>                                                                                                                                          </div>  </section>    <section id="france" class="area-wallpaper-month">    <h2>[metatags_titlex],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex]</h2>    <div class="l-column-2">      </div>  </section>    <section id="201707" class="area-wallpaper-month">    <h2>[metatags_titlex],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex]</h2>    <div class="l-column-2">                                                                                                                                                                                                                                                                                            <div class="l-column-sub l-wide-480 box-wallpaper-wrap">      <div class="box-wallpaper" tabindex="0">        <img class="img-wallpaper pc" src="/media/images/download/1707LIVING_A_460259_thumb.jpg" width="460" height="259" alt="">        [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]        <div class="box-wallpaper-link pc">          <dl class="list-wallaper-link single">                          <dt>1920×1080 ｜ 1366×768</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1707LIVING_A_19201080.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1707LIVING_A_19201080.jpg">DOWNLOAD（541.1 KB）</a>              </dd>                                      <dt>1280×1024</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1707LIVING_A_12801024.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1707LIVING_A_12801024.jpg">DOWNLOAD（479.5 KB）</a>              </dd>                                      <dt>1440×900 ｜ 1280×800</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1707LIVING_A_1440900.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1707LIVING_A_1440900.jpg">DOWNLOAD（1.2 MB）</a>              </dd>                                  </dl>        </div>      </div>    </div>                                                                                                                                                                                                                                                                                                                                                                                                                                <div class="l-column-sub l-wide-480 box-wallpaper-wrap">      <div class="box-wallpaper" tabindex="0">        <img class="img-wallpaper pc" src="/media/images/download/1707LIVING_B_460259_thumb.jpg" width="460" height="259" alt="">        [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]        <div class="box-wallpaper-link pc">          <dl class="list-wallaper-link single">                          <dt>1920×1080 ｜ 1366×768</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1707LIVING_B_19201080.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1707LIVING_B_19201080.jpg">DOWNLOAD（516.0 KB）</a>              </dd>                                      <dt>1280×1024</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1707LIVING_B_12801024.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1707LIVING_B_12801024.jpg">DOWNLOAD（1.4 MB）</a>              </dd>                                      <dt>1440×900 ｜ 1280×800</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1707LIVING_B_1440900.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1707LIVING_B_1440900.jpg">DOWNLOAD（393.5 KB）</a>              </dd>                                  </dl>        </div>      </div>    </div>                                                                                                                                                                                                                                                                                                                                                                                                                                <div class="l-column-sub l-wide-480 box-wallpaper-wrap">      <div class="box-wallpaper" tabindex="0">        <img class="img-wallpaper pc" src="/media/images/download/1707TEAROOM_A_460259_thumb.jpg" width="460" height="259" alt="">        [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]        <div class="box-wallpaper-link pc">          <dl class="list-wallaper-link single">                          <dt>1920×1080 ｜ 1366×768</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1707TEAROOM_A_19201080.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1707TEAROOM_A_19201080.jpg">DOWNLOAD（182.9 KB）</a>              </dd>                                      <dt>1280×1024</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1707TEAROOM_A_12801024.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1707TEAROOM_A_12801024.jpg">DOWNLOAD（143.1 KB）</a>              </dd>                                      <dt>1440×900 ｜ 1280×800</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1707TEAROOM_A_1440900.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1707TEAROOM_A_1440900.jpg">DOWNLOAD（128.2 KB）</a>              </dd>                                  </dl>        </div>      </div>    </div>                                                                                                                                                                                                                                                                                                                                                                                                                                <div class="l-column-sub l-wide-480 box-wallpaper-wrap">      <div class="box-wallpaper" tabindex="0">        <img class="img-wallpaper pc" src="/media/images/download/1707TEAROOM_B_460259_thumb.jpg" width="460" height="259" alt="">        [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]        <div class="box-wallpaper-link pc">          <dl class="list-wallaper-link single">                          <dt>1920×1080 ｜ 1366×768</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1707TEAROOM_B_19201080.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1707TEAROOM_B_19201080.jpg">DOWNLOAD（335.2 KB）</a>              </dd>                                      <dt>1280×1024</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1707TEAROOM_B_12801024.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1707TEAROOM_B_12801024.jpg">DOWNLOAD（280.3 KB）</a>              </dd>                                      <dt>1440×900 ｜ 1280×800</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1707TEAROOM_B_1440900.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1707TEAROOM_B_1440900.jpg">DOWNLOAD（238.5 KB）</a>              </dd>                                  </dl>        </div>      </div>    </div>                                                                                                                                          </div>  </section>    <section id="201706" class="area-wallpaper-month">    <h2>[metatags_titlex],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex]</h2>    <div class="l-column-2">                                                                                                                                                                                                                                                                                            <div class="l-column-sub l-wide-480 box-wallpaper-wrap">      <div class="box-wallpaper" tabindex="0">        <img class="img-wallpaper pc" src="/media/images/download/1706LIVING_A_460259_thumb.jpg" width="460" height="259" alt="">        [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]        <div class="box-wallpaper-link pc">          <dl class="list-wallaper-link single">                          <dt>1920×1080 ｜ 1366×768</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1706LIVING_A_19201080.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1706LIVING_A_19201080.jpg">DOWNLOAD（550.4 KB）</a>              </dd>                                      <dt>1280×1024</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1706LIVING_A_12801024.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1706LIVING_A_12801024.jpg">DOWNLOAD（312.8 KB）</a>              </dd>                                      <dt>1440×900 ｜ 1280×800</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1706LIVING_A_1440900.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1706LIVING_A_1440900.jpg">DOWNLOAD（362.3 KB）</a>              </dd>                                  </dl>        </div>      </div>    </div>                                                                                                                                                                                                                                                                                                                                                                                                                                <div class="l-column-sub l-wide-480 box-wallpaper-wrap">      <div class="box-wallpaper" tabindex="0">        <img class="img-wallpaper pc" src="/media/images/download/1706LIVING_B_460259_thumb.jpg" width="460" height="259" alt="">        [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]        <div class="box-wallpaper-link pc">          <dl class="list-wallaper-link single">                          <dt>1920×1080 ｜ 1366×768</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1706LIVING_B_19201080.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1706LIVING_B_19201080.jpg">DOWNLOAD（263.8 KB）</a>              </dd>                                      <dt>1280×1024</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1706LIVING_B_12801024.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1706LIVING_B_12801024.jpg">DOWNLOAD（184.4 KB）</a>              </dd>                                      <dt>1440×900 ｜ 1280×800</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1706LIVING_B_1440900.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1706LIVING_B_1440900.jpg">DOWNLOAD（183.4 KB）</a>              </dd>                                  </dl>        </div>      </div>    </div>                                                                                                                                                                                                                                                                                                                                                                                                                                <div class="l-column-sub l-wide-480 box-wallpaper-wrap">      <div class="box-wallpaper" tabindex="0">        <img class="img-wallpaper pc" src="/media/images/download/1706TEAROOM_A_460259_thumb.jpg" width="460" height="259" alt="">        [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]        <div class="box-wallpaper-link pc">          <dl class="list-wallaper-link single">                          <dt>1920×1080 ｜ 1366×768</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1706TEAROOM_A_19201080.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1706TEAROOM_A_19201080.jpg">DOWNLOAD（204.6 KB）</a>              </dd>                                      <dt>1280×1024</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1706TEAROOM_A_12801024.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1706TEAROOM_A_12801024.jpg">DOWNLOAD（192.9 KB）</a>              </dd>                                      <dt>1440×900 ｜ 1280×800</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1706TEAROOM_A_1440900.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1706TEAROOM_A_1440900.jpg">DOWNLOAD（142.6 KB）</a>              </dd>                                  </dl>        </div>      </div>    </div>                                                                                                                                                                                                                                                                                                                                                                                                                                <div class="l-column-sub l-wide-480 box-wallpaper-wrap">      <div class="box-wallpaper" tabindex="0">        <img class="img-wallpaper pc" src="/media/images/download/1706TEAROOM_B_460259_thumb.jpg" width="460" height="259" alt="">        [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]        <div class="box-wallpaper-link pc">          <dl class="list-wallaper-link single">                          <dt>1920×1080 ｜ 1366×768</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1706TEAROOM_B_19201080.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1706TEAROOM_B_19201080.jpg">DOWNLOAD（238.3 KB）</a>              </dd>                                      <dt>1280×1024</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1706TEAROOM_B_12801024.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1706TEAROOM_B_12801024.jpg">DOWNLOAD（177.6 KB）</a>              </dd>                                      <dt>1440×900 ｜ 1280×800</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1706TEAROOM_B_1440900.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1706TEAROOM_B_1440900.jpg">DOWNLOAD（160.2 KB）</a>              </dd>                                  </dl>        </div>      </div>    </div>                                                                                                                                          </div>  </section>    <section id="201705" class="area-wallpaper-month">    <h2>[metatags_titlex],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex]</h2>    <div class="l-column-2">                                                                                                                                                                                                                                                                                            <div class="l-column-sub l-wide-480 box-wallpaper-wrap">      <div class="box-wallpaper" tabindex="0">        <img class="img-wallpaper pc" src="/media/images/download/1705LIVING_A_460259_thumb.jpg" width="460" height="259" alt="">        [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]        <div class="box-wallpaper-link pc">          <dl class="list-wallaper-link single">                          <dt>1920×1080 ｜ 1366×768</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1705LIVING_A_19201080.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1705LIVING_A_19201080.jpg">DOWNLOAD（363.5 KB）</a>              </dd>                                      <dt>1280×1024</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1705LIVING_A_12801024.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1705LIVING_A_12801024.jpg">DOWNLOAD（330.3 KB）</a>              </dd>                                      <dt>1440×900 ｜ 1280×800</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1705LIVING_A_1440900.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1705LIVING_A_1440900.jpg">DOWNLOAD（265.2 KB）</a>              </dd>                                  </dl>        </div>      </div>    </div>                                                                                                                                                                                                                                                                                                                                                                                                                                <div class="l-column-sub l-wide-480 box-wallpaper-wrap">      <div class="box-wallpaper" tabindex="0">        <img class="img-wallpaper pc" src="/media/images/download/1705LIVING_B_460259_thumb.jpg" width="460" height="259" alt="">        [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]        <div class="box-wallpaper-link pc">          <dl class="list-wallaper-link single">                          <dt>1920×1080 ｜ 1366×768</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1705LIVING_B_19201080.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1705LIVING_B_19201080.jpg">DOWNLOAD（526.9 KB）</a>              </dd>                                      <dt>1280×1024</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1705LIVING_B_12801024.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1705LIVING_B_12801024.jpg">DOWNLOAD（367.5 KB）</a>              </dd>                                      <dt>1440×900 ｜ 1280×800</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1705LIVING_B_1440900.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1705LIVING_B_1440900.jpg">DOWNLOAD（368.3 KB）</a>              </dd>                                  </dl>        </div>      </div>    </div>                                                                                                                                                                                                                                                                                                                                                                                                                                <div class="l-column-sub l-wide-480 box-wallpaper-wrap">      <div class="box-wallpaper" tabindex="0">        <img class="img-wallpaper pc" src="/media/images/download/1705TEAROOM_A_460259_thumb.jpg" width="460" height="259" alt="">        [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]        <div class="box-wallpaper-link pc">          <dl class="list-wallaper-link single">                          <dt>1920×1080 ｜ 1366×768</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1705TEAROOM_A_19201080.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1705TEAROOM_A_19201080.jpg">DOWNLOAD（274.3 KB）</a>              </dd>                                      <dt>1280×1024</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1705TEAROOM_A_12801024.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1705TEAROOM_A_12801024.jpg">DOWNLOAD（222.5 KB）</a>              </dd>                                      <dt>1440×900 ｜ 1280×800</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1705TEAROOM_A_1440900.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1705TEAROOM_A_1440900.jpg">DOWNLOAD（184.6 KB）</a>              </dd>                                  </dl>        </div>      </div>    </div>                                                                                                                                                                                                                                                                                                                                                                                                                                <div class="l-column-sub l-wide-480 box-wallpaper-wrap">      <div class="box-wallpaper" tabindex="0">        <img class="img-wallpaper pc" src="/media/images/download/1705TEAROOM_B_460259_thumb.jpg" width="460" height="259" alt="">        [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]        <div class="box-wallpaper-link pc">          <dl class="list-wallaper-link single">                          <dt>1920×1080 ｜ 1366×768</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1705TEAROOM_B_19201080.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1705TEAROOM_B_19201080.jpg">DOWNLOAD（327.1 KB）</a>              </dd>                                      <dt>1280×1024</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1705TEAROOM_B_12801024.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1705TEAROOM_B_12801024.jpg">DOWNLOAD（211.0 KB）</a>              </dd>                                      <dt>1440×900 ｜ 1280×800</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1705TEAROOM_B_1440900.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1705TEAROOM_B_1440900.jpg">DOWNLOAD（226.6 KB）</a>              </dd>                                  </dl>        </div>      </div>    </div>                                                                                                                                          </div>  </section>    <section id="201704" class="area-wallpaper-month">    <h2>[metatags_titlex],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex]</h2>    <div class="l-column-2">                                                                                                                                                                                                                                                                                            <div class="l-column-sub l-wide-480 box-wallpaper-wrap">      <div class="box-wallpaper" tabindex="0">        <img class="img-wallpaper pc" src="/media/images/download/1704LIVING_A_460259_thumb.jpg" width="460" height="259" alt="">        [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]        <div class="box-wallpaper-link pc">          <dl class="list-wallaper-link single">                          <dt>1920×1080 ｜ 1366×768</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1704LIVING_A_19201080.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1704LIVING_A_19201080.jpg">DOWNLOAD（412.1 KB）</a>              </dd>                                      <dt>1280×1024</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1704LIVING_A_12801024.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1704LIVING_A_12801024.jpg">DOWNLOAD（306.3 KB）</a>              </dd>                                      <dt>1440×900 ｜ 1280×800</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1704LIVING_A_1440900.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1704LIVING_A_1440900.jpg">DOWNLOAD（320.3 KB）</a>              </dd>                                  </dl>        </div>      </div>    </div>                                                                                                                                                                                                                                                                                                                                                                                                                                <div class="l-column-sub l-wide-480 box-wallpaper-wrap">      <div class="box-wallpaper" tabindex="0">        <img class="img-wallpaper pc" src="/media/images/download/1704LIVING_B_460259_thumb.jpg" width="460" height="259" alt="">        [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]        <div class="box-wallpaper-link pc">          <dl class="list-wallaper-link single">                          <dt>1920×1080 ｜ 1366×768</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1704LIVING_B_19201080.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1704LIVING_B_19201080.jpg">DOWNLOAD（756.7 KB）</a>              </dd>                                      <dt>1280×1024</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1704LIVING_B_12801024.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1704LIVING_B_12801024.jpg">DOWNLOAD（534.4 KB）</a>              </dd>                                      <dt>1440×900 ｜ 1280×800</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1704LIVING_B_1440900.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1704LIVING_B_1440900.jpg">DOWNLOAD（514.9 KB）</a>              </dd>                                  </dl>        </div>      </div>    </div>                                                                                                                                                                                                                                                                                                                                                                                                                                <div class="l-column-sub l-wide-480 box-wallpaper-wrap">      <div class="box-wallpaper" tabindex="0">        <img class="img-wallpaper pc" src="/media/images/download/1704TEAROOM_A_460259_thumb.jpg" width="460" height="259" alt="">        [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]        <div class="box-wallpaper-link pc">          <dl class="list-wallaper-link single">                          <dt>1920×1080 ｜ 1366×768</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1704TEAROOM_A_19201080.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1704TEAROOM_A_19201080.jpg">DOWNLOAD（355.4 KB）</a>              </dd>                                      <dt>1280×1024</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1704TEAROOM_A_12801024.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1704TEAROOM_A_12801024.jpg">DOWNLOAD（289.6 KB）</a>              </dd>                                      <dt>1440×900 ｜ 1280×800</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1704TEAROOM_A_1440900.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1704TEAROOM_A_1440900.jpg">DOWNLOAD（272.7 KB）</a>              </dd>                                  </dl>        </div>      </div>    </div>                                                                                                                                                                                                                                                                                                                                                                                                                                <div class="l-column-sub l-wide-480 box-wallpaper-wrap">      <div class="box-wallpaper" tabindex="0">        <img class="img-wallpaper pc" src="/media/images/download/1704TEAROOM_B_460259_thumb.jpg" width="460" height="259" alt="">        [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]        <div class="box-wallpaper-link pc">          <dl class="list-wallaper-link single">                          <dt>1920×1080 ｜ 1366×768</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1704TEAROOM_B_19201080.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1704TEAROOM_B_19201080.jpg">DOWNLOAD（545.1 KB）</a>              </dd>                                      <dt>1280×1024</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1704TEAROOM_B_12801024.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1704TEAROOM_B_12801024.jpg">DOWNLOAD（510.3 KB）</a>              </dd>                                      <dt>1440×900 ｜ 1280×800</dt>              <dd>                <a class="js-ga-tracking" href="/download/../media/images/download/1704TEAROOM_B_1440900.jpg" target="_blank" download data-ga-category="wallpaper" data-ga-action="download" data-ga-label="1704TEAROOM_B_1440900.jpg">DOWNLOAD（93.7 KB）</a>              </dd>                                  </dl>        </div>      </div>    </div>                                                                                                                                          </div>  </section>      </div>      <div class="area-download-small">        <ul class="list-small">          <li><small>本ホームページに掲載の文章・画像・写真などを無断で複製することは、法律で禁じられています。 </small></li><li><small>この壁紙の著作権は、ダウンロード後も株式会社サザビーリーグに帰属しております。したがって、壁紙としての個人利用以外の使用は法律で禁じられています。</small></li>        </ul>      </div>    </div></div></main><aside id="notices-important">  <p class="pod-link-info">    <a class="wedge wedge-arrow wedge-arrow-pygmy" href="/info/"><i>重要なお知らせ一覧へ</i></a>  </p></aside><footer id="footer">  <div class="area-footer-links">    <ul id="nav-footer-links" class="only-sp nav-global-links">      <li class="footlink-living">        <dl class="accordion-standard odd">          <dt class="title title-shadow">            <a class="link-block" href="/living/">LIVING</a>          </dt>          <dd>            <div>              <ul class="list-sub only-sp">                <li><a class="link-block" href="/living/home-and-living/">HOME&LIVING</a></li>                <li><a class="link-block" href="/living/gift-and-living/">GIFT&LIVING</a></li>                <li><a class="link-block" href="/article/seasonal-item/">季節のおすすめ</a></li>                <li><a class="link-block" href="/article/standard/">定番アイテム</a></li>                <li><a class="link-block" href="/living/flower/">花で彩る毎日の暮らし</a></li>                <li><a class="link-block" href="/living/happy-choice/">Happy CHOICE</a></li>                <li><a class="link-block" href="/living/gift/">GIFT</a></li>                <li><a class="link-block" href="/article/living-event-campaign/">EVENT&CAMPAIGN</a></li>                <li><a class="link-block" href="/article/csr/">CSR</a></li>              </ul>            </div>          </dd>        </dl>      </li>      <li class="footlink-tearoom">        <dl class="accordion-standard even">          <dt class="title title-shadow">            <a class="link-block" href="/tearoom/">TEAROOM</a>          </dt>          <dd>            <div>              <ul class="list-sub only-sp">                <li><a class="link-block" href="/tearoom/bakery/">BAKERY</a></li>                <li><a class="link-block" href="/tearoom/love-and-table/">LOVE&TABLE</a></li>                <li><a class="link-block" href="/tearoom/teastand/">TEASTAND</a></li>                <li><a class="link-block" href="/tearoom/menu/seasonal-menu/">メニュー</a></li>                <li><a class="link-block" href="/tearoom/takeout/seasonal-menu/">テイクアウト</a></li>                <li><a class="link-block" href="/article/tearoom-campaign/">期間限定キャペーン</a></li>                <li><a class="link-block" href="https://tearoom.e-gift.co/" target="_blank">e Gift</a></li>                <li><a class="link-block" href="/tearoom/menu/allergy-info/">アレルギー・エネルギー情報</a></li>              </ul>            </div>          </dd>        </dl>      </li>      <li class="footlink-shop">        <div class="accordion-standard odd">          <p class="title">            <a class="link-block" href="/shop-list/">ショップ検索</a>          </p>        </div>        <dl class="footlink-onlineshop accordion-standard even" data-device="sp">          <dt class="title title-shadow">            <a class="link-block" href="/online-shop/">オンラインショップ</a>          </dt>          <dd>            <div>              <ul class="list-sub only-sp">                <li><a class="link-block js-ga-tracking" href="http://shop.afternoon-tea.net/" target="_blank" data-ga-category="link onlineshop" data-ga-action="click" data-ga-label="[标题] ONLINE SHOP">[标题] ONLINE SHOP</a></li>                <li><a class="link-block js-ga-tracking" href="http://zozo.jp/shop/afternoontea/" target="_blank" data-ga-category="link onlineshop" data-ga-action="click" data-ga-label="ZOZOTOWN">ZOZOTOWN</a></li>                <li><a class="link-block js-ga-tracking" href="http://www.magaseek.com/shop/top/sh_ICLAFT-tr_s" target="_blank" data-ga-category="link onlineshop" data-ga-action="click" data-ga-label="MAGASEEK">MAGASEEK</a></li>                <li><a class="link-block js-ga-tracking" href="https://brandavenue.rakuten.co.jp/ba/shop-afternoontealiving/" target="_blank" data-ga-category="link onlineshop" data-ga-action="click" data-ga-label="Rakuten BRAND AVENUE">Rakuten BRAND AVENUE</a></li>                <li>                  <a class="link-block js-ga-tracking sp" href="http://www.rakuten.co.jp/afternoon-tea-tearoom/" target="_blank" data-ga-category="link onlineshop" data-ga-action="click" data-ga-label="楽天市場 SP">楽天市場</a>                  <a class="link-block js-ga-tracking pc" href="http://www.rakuten.ne.jp/gold/afternoon-tea-tearoom/" target="_blank" data-ga-category="link onlineshop" data-ga-action="click" data-ga-label="楽天市場 PC">楽天市場</a>                </li>                <li><a class="link-block js-ga-tracking" href="http://www.amazon.co.jp/gp/node/index.html?ie=UTF8&marketplaceID=A1VC38T7YXB528&me=A2ML427V2I885S&merchant=A2ML427V2I885S&redirect=true" target="_blank" data-ga-category="link onlineshop" data-ga-action="click" data-ga-label="amazon">amazon</a></li>              </ul>            </div>          </dd>        </dl>      </li>      <li class="footlink-members">        <div class="accordion-standard odd">          <p class="title">            <a class="link-block" href="/members/">[metatags_title]</a>          </p>        </div>        <div class="footlink-app accordion-standard even">          <p class="title">            <a class="link-block" href="/app/">[metatags_title]</a>          </p>        </div>        <div class="footlink-download accordion-standard odd">          <p class="title">            <a class="link-block" href="/download/">壁紙ダウンロード</a>          </p>        </div>      </li>      <li class="footlink-about">        <dl class="accordion-standard even">          <dt class="title title-shadow">            <a class="link-block" href="/about/">[metatags_title]</a>          </dt>          <dd>            <div>              <ul class="list-sub">                <li><a class="link-block" href="/about/history/">ヒストリー</a></li>                <li><a class="link-block" href="/about/message/">ブランドメッセージ</a></li>                <li><a class="link-block" href="/brand-list/">ブランドリスト</a></li>              </ul>            </div>          </dd>        </dl>        <div class="footlink-sns accordion-standard odd">          <div class="content">            <ul class="list-sub list-no-shadow">              <li><a class="link-block" href="https://www.facebook.com/afternoontea.jp" target="_blank">Facebook</a></li>              <li><a class="link-block" href="https://twitter.com/AfternoonTea_LT" target="_blank">Twitter</a></li>              <li><a class="link-block" href="https://instagram.com/afternoontea_official/" target="_blank">Instagram</a></li>              <li><a class="link-block" href="http://www.youtube.com/AfternoonTeaOfficial" target="_blank">YouTube</a></li>            </ul>          </div>        </div>      </li>    </ul>  </div>  <div class="area-footer-info">    <ul id="nav-footer-info">      <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>      <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>      <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>      <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>      <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>      <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>    </ul>  </div>  <div id="copyright">    <small>Copyright©SAZABY LEAGUE, Ltd. All Rights Reserved.</small>  </div></footer><header id="header">  <div id="header-main">    <div id="logo-main">      <a class="logo-aft link-top" href="/" title="[标题]">        <img src="/media/images/logo/afternoon-tea.svg" alt="Afternoon-Tea" width="140" height="20">      </a>    </div>    <div id="nav-main">      <a id="search-shop" class="link-search" href="/shop-list/" title="Shop Search">        <span class="icon icon-shop"></span>      </a>      <a id="js-menu" class="close menu-berger js-modal_open" data-modal-target="glmenu" title="Global Menu">        <span class="menu-berger-piece"></span>      </a>    </div>  </div></header></div><a class="float-totop" data-scroll-to="0"></a><div class="mod-modal mod-modal-nav js-modal" data-modal-name="glmenu" data-modal-anim="fade">  <div class="area-modal area-globalmenu js-modal_content">    <a class="modal-close js-modal_close"></a>    <div class="box-sns">      <a class="icon icon-facebook" href="https://www.facebook.com/afternoontea.jp" target="_blank"></a>      <a class="icon icon-twitter" href="https://twitter.com/AfternoonTea_LT" target="_blank"></a>      <a class="icon icon-instagram" href="http://instagram.com/afternoontea_official/" target="_blank"></a>      <a class="icon icon-youtube" href="http://www.youtube.com/AfternoonTeaOfficial" target="_blank"></a>    </div>    <a class="pc logo-aft link-top logo-aft-insidemenu" href="/" title="[标题]">      <img src="/media/images/logo/afternoon-tea.svg" alt="Afternoon-Tea" width="140" height="20">    </a>    <div class="content content-nav">      <nav class="nav-living">        <h2>[metatags_titlex],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex]</h2>        <ul class="list-nav-main">          <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>          <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>          <li><a>&nbsp;</a></li>        </ul>        <ul class="list-nav-sub">          <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>          <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>          <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>          <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>          <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>          <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>        </ul>      </nav>      <nav class="nav-tearoom">        <h2>[metatags_titlex],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex]</h2>        <ul class="list-nav-main">          <li>[hrefx][hrefx][hrefx][hrefx]</li>          <li>[hrefx][hrefx][hrefx][hrefx]</li>          <li>[hrefx][hrefx][hrefx][hrefx]</li>        </ul>        <ul class="list-nav-sub">          <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>          <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>          <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>          <li>[hrefx][hrefx][hrefx][hrefx]</li>          <li><a>&ensp;</a></li>          <li><a>&ensp;</a></li>        </ul>      </nav>    </div>    <div class="content content-nav-sub">    [hrefx][hrefx][hrefx][hrefx][hrefx]    [hrefx][hrefx][hrefx][hrefx][hrefx]    </div>    <div class="content content-nav-general first">      <ul class="nav-global-links list-zebra only-sp">        <li>          <a class="link-block" href="/shop-list/">ショップ検索</a>        </li>        <li>          <a class="link-block" href="/online-shop/">オンラインショップ</a>        </li>        <li>          <a class="link-block" href="/members/">[标题] メンバーズ</a>        </li>        <li>          <a class="link-block" href="/app/">[标题] アプリ</a>        </li>      </ul>    </div>    <div class="content content-nav-general second">      <ul class="nav-global-links list-zebra list-zebra only-sp">        <li>          <a class="link-block" href="/download/">壁紙ダウンロード</a>        </li>        <li>          <a class="link-block" href="/about/">[标题]について</a>        </li>        <li>          <a class="link-block" href="/english/">ENGLISH</a>        </li>      </ul>    </div>    <div class="box-close">      <a class="btn-text-close js-modal_close">CLOSE</a>    </div>  </div></div></body></html>